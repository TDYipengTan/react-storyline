import React from "react";
import { render } from "@testing-library/react";
import Timer, { TimerType } from "../Timer";

describe("<Timer />", () => {
  it("renders", () => {
    const { container } = render(<Timer />);

    expect(container).toMatchSnapshot();
  });

  it("renders a timer with other attributes", () => {
    const { getByText } = render(<Timer data-prop="test">Test</Timer>);

    expect(getByText("Test").getAttribute("data-prop")).toEqual("test");
  });

  it("renders a timer with the default & custom class", () => {
    const { getByText } = render(
      <Timer className="customClassName">Test</Timer>
    );

    expect(getByText("Test").classList.value).toBe(
      "co-message__timer customClassName"
    );
  });

  it("renders a timer with aditional styles", () => {
    const { getByText } = render(<Timer style={{ color: "red" }}>Test</Timer>);

    expect(getByText("Test").style.color).toBe("red");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<TimerType>();

    const { getByTestId } = render(
      <Timer forwardedRef={ref} data-testid="test" />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders an active timer", () => {
    const { getByText } = render(<Timer active>Test</Timer>);

    expect(getByText("Test").classList).toContain("co-message__timer--active");
  });

  it("renders with a custom timer duration", () => {
    const { getByText } = render(<Timer duration={10}>Test</Timer>);

    expect(getByText("Test").style.animationDuration).toBe("10s");
  });

  it("renders with elapsed time", () => {
    const { getByText } = render(<Timer elapsed={3}>Test</Timer>);

    expect(getByText("Test").style.animationDelay).toBe("-3s");
  });
});
