import React from "react";
import { render } from "@testing-library/react";
import Message, { MessageType } from "../Message";

describe("<Message />", () => {
  it("renders", () => {
    const { container } = render(<Message />);

    expect(container).toMatchSnapshot();
  });

  it("renders a message with other attributes", () => {
    const { getByText } = render(<Message data-prop="test">Test</Message>);

    expect(getByText("Test").getAttribute("data-prop")).toEqual("test");
  });

  it("renders a message with the default & custom class", () => {
    const { getByText } = render(
      <Message className="customClassName">Test</Message>
    );

    expect(getByText("Test").classList.value).toBe(
      "co-message co-message--info customClassName"
    );
  });

  it("renders with a Ref", () => {
    const ref = React.createRef<MessageType>();

    const { getByTestId } = render(
      <Message forwardedRef={ref} data-testid="test" />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders a primary message", () => {
    const { getByText } = render(<Message variation="info">Test</Message>);

    expect(getByText("Test").classList).toContain("co-message--info");
  });

  it("renders a success message", () => {
    const { getByText } = render(<Message variation="success">Test</Message>);

    expect(getByText("Test").classList).toContain("co-message--success");
  });

  it("renders a warning message", () => {
    const { getByText } = render(<Message variation="warning">Test</Message>);

    expect(getByText("Test").classList).toContain("co-message--warning");
  });

  it("renders an error message", () => {
    const { getByText } = render(<Message variation="error">Test</Message>);

    expect(getByText("Test").classList).toContain("co-message--error");
  });

  it("renders a feature message", () => {
    const { getByText } = render(<Message variation="feature">Test</Message>);

    expect(getByText("Test").classList).toContain("co-message--feature");
  });

  it("renders a banner message", () => {
    const { getByText } = render(<Message type="banner">Test</Message>);

    expect(getByText("Test").classList).toContain("co-message--banner");
  });

  it("renders a floating message", () => {
    const { getByText } = render(<Message type="floating">Test</Message>);

    expect(getByText("Test").classList).toContain("co-message--floating");
  });
});
