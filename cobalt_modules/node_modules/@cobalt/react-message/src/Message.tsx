import React, { FC, HTMLAttributes, Ref } from "react";
import cc from "classcat";
import styles from "@cobalt/css-message";

export type MessageType = HTMLDivElement;

type Type = "banner" | "floating";
type Variation = "info" | "success" | "warning" | "error" | "feature";

type Styles = typeof styles;

export interface Props extends HTMLAttributes<MessageType> {
  type?: Type;
  variation?: Variation;
  forwardedRef?: Ref<MessageType>;
}

export type ModifiersTypes = Type | Variation;

export const classModifiers: { [k in ModifiersTypes]: keyof Styles } = {
  info: "co-message--info",
  success: "co-message--success",
  warning: "co-message--warning",
  error: "co-message--error",
  feature: "co-message--feature",
  banner: "co-message--banner",
  floating: "co-message--floating"
};

const getModifierClass = (modifier: ModifiersTypes | undefined) =>
  modifier && styles[classModifiers[modifier]];

const Message: FC<Props> = ({
  className = "",
  forwardedRef,
  type,
  variation = "info",
  ...props
}) => {
  const classStyles = cc([
    styles["co-message"],
    styles[classModifiers[variation]],
    getModifierClass(type),
    className
  ]);
  return <div className={classStyles} ref={forwardedRef} {...props} />;
};

export default Message;
