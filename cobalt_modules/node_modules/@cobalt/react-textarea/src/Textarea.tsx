import React, { FunctionComponent, TextareaHTMLAttributes, Ref } from "react";
import cc from "classcat";
import styles from "@cobalt/css-textarea";

type Styles = typeof styles;
type Size = "small" | "medium";
type Variation = "error" | "warning" | "unstyled";

export type TextareaType = HTMLTextAreaElement;

type TextareaAttributes = Omit<
  TextareaHTMLAttributes<TextareaType>,
  "defaultValue"
>;

export interface Props extends TextareaAttributes {
  resizable?: boolean;
  size?: Size;
  variation?: Variation;
  forwardedRef?: Ref<TextareaType>;
}

export type Modifier = Size | Variation;
export const classModifiers: { [k in Modifier]: keyof Styles } = {
  warning: "co-textarea--warning",
  error: "co-textarea--error",
  small: "co-textarea--small",
  medium: "co-textarea--medium",
  unstyled: "co-textarea--unstyled"
};

const getClassName = (modifier: Variation | undefined) =>
  modifier && styles[classModifiers[modifier]];

const Textarea: FunctionComponent<Props> = ({
  className = "",
  forwardedRef,
  resizable = "true",
  variation,
  size = "medium",
  ...props
}) => {
  const classStyles = [
    styles["co-textarea"],
    styles[classModifiers[size]],
    getClassName(variation),
    {
      [styles["co-textarea--non-resizable"]]: !resizable
    },
    className
  ];

  return (
    <textarea
      className={cc(classStyles)}
      ref={forwardedRef}
      data-co-disabled={props.disabled || undefined}
      aria-disabled={props.disabled || undefined}
      {...props}
    />
  );
};

export default Textarea;
