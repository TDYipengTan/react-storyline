import React from "react";
import { render } from "@testing-library/react";
import Textarea, { TextareaType } from "../Textarea";

describe("<Textarea />", () => {
  it("renders", () => {
    const { container } = render(<Textarea />);

    expect(container).toMatchSnapshot();
  });

  it("receives custom attribute", () => {
    const { getByTestId } = render(
      <Textarea data-testid="textarea" data-custom="custom" />
    );

    expect(getByTestId("textarea").getAttribute("data-custom")).toEqual(
      "custom"
    );
  });

  it("renders with default and additional classes", () => {
    const { getByTestId } = render(
      <Textarea data-testid="textarea" className="new-class" />
    );

    expect(getByTestId("textarea").classList.value).toBe(
      "co-textarea co-textarea--medium new-class"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<TextareaType>();

    const { getByTestId } = render(
      <Textarea forwardedRef={ref} data-testid="test" />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders a disabled textarea", () => {
    const { getByTestId } = render(
      <Textarea disabled data-testid="textarea" />
    );

    const textarea = getByTestId("textarea");

    expect(textarea.getAttribute("disabled")).not.toBeNull();
    expect(textarea.getAttribute("data-co-disabled")).toBe("true");
    expect(textarea.getAttribute("aria-disabled")).toBe("true");
  });

  it("renders a small textarea", () => {
    const { getByTestId } = render(
      <Textarea size="small" data-testid="textarea" />
    );

    const textareaClassList = getByTestId("textarea").classList;

    expect(textareaClassList).toContain("co-textarea--small");
  });

  it("renders a medium textarea", () => {
    const { getByTestId } = render(
      <Textarea size="medium" data-testid="textarea" />
    );

    expect(getByTestId("textarea").classList).toContain("co-textarea--medium");
  });

  it("renders with error variation", () => {
    const { getByTestId } = render(
      <Textarea variation="error" data-testid="textarea" />
    );

    expect(getByTestId("textarea").classList).toContain("co-textarea--error");
  });

  it("renders with warning variation", () => {
    const { getByTestId } = render(
      <Textarea variation="warning" data-testid="textarea" />
    );

    expect(getByTestId("textarea").classList.value).toContain(
      "co-textarea--warning"
    );
  });

  it("renders with unstyled variation", () => {
    const { getByTestId } = render(
      <Textarea variation="unstyled" data-testid="textarea" />
    );

    expect(getByTestId("textarea").classList).toContain(
      "co-textarea--unstyled"
    );
  });

  it("renders with non-resizable variation", () => {
    const { getByTestId } = render(
      <Textarea resizable={false} data-testid="textarea" />
    );

    expect(getByTestId("textarea").classList).toContain(
      "co-textarea--non-resizable"
    );
  });
});
