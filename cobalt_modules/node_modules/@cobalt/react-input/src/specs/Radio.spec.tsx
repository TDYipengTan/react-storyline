import React from "react";
import { render, fireEvent } from "@testing-library/react";
import Radio from "../Radio";
import { InputType } from "../InputTypes";

const noop = () => {};

describe("<Radio />", () => {
  it("renders default", () => {
    const { getByTestId } = render(
      <Radio data-testid="test" name="example" onChange={noop} />
    );

    expect(getByTestId("test").getAttribute("checked")).toBeFalsy();
  });

  it("renders checked", () => {
    const { getByTestId } = render(
      <Radio data-testid="test" name="example" onChange={noop} checked />
    );

    expect(getByTestId("test").getAttribute("checked")).not.toBeNull();
  });

  it("renders with props", () => {
    const { getByTestId } = render(
      <Radio data-testid="test" name="example" value="v1" onChange={noop} />
    );

    const input = getByTestId("test");

    expect(input.getAttribute("name")).toEqual("example");
    expect(input.getAttribute("value")).toEqual("v1");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<InputType>();
    const { getByTestId } = render(
      <Radio data-testid="radio-ref" onChange={noop} forwardedRef={ref} />
    );

    const input = getByTestId("radio-ref");

    expect(input).toBe(ref.current);
  });

  describe("when it is clicked", () => {
    const onChange = jest.fn();
    let input: HTMLElement;

    beforeAll(() => {
      const { getByTestId } = render(
        <Radio data-testid="radio-click" onChange={onChange} />
      );

      input = getByTestId("radio-click");

      fireEvent.click(input);
    });

    it("calls onChange", () => {
      expect(onChange).toHaveBeenCalled();
    });

    it("does not change its internal state", () => {
      expect(input.getAttribute("checked")).toBeNull();
    });
  });
});
