import React from "react";
import { render } from "@testing-library/react";
import Input from "../Input";
import { InputType } from "../InputTypes";

const noop = () => {};

describe("Input type color", () => {
  it("renders", () => {
    const { container } = render(
      <Input onChange={noop} type="color" value="#f3f3f3" />
    );

    expect(container).toMatchSnapshot();
  });

  it("renders with props", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-color"
        onChange={noop}
        type="color"
        name="example"
        value="#f3f3f3"
      />
    );

    const input = getByTestId("test-color");

    expect(input.getAttribute("name")).toEqual("example");
    expect(input.getAttribute("value")).toEqual("#f3f3f3");
  });

  it("receives custom attribute", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-attribute"
        onChange={noop}
        type="color"
        value="#f3f3f3"
        data-custom="custom-attribute"
      />
    );
    const input = getByTestId("test-attribute");

    expect(input.getAttribute("data-custom")).toEqual("custom-attribute");
  });

  it("renders with default and additional classes", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-class"
        onChange={noop}
        type="color"
        value="#f3f3f3"
        className="custom-class"
      />
    );
    const input = getByTestId("test-class");

    expect(input.classList.value).toBe("co-color-input custom-class");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<InputType>();
    const { getByTestId } = render(
      <Input
        data-testid="color-ref"
        onChange={noop}
        type="color"
        value="#f3f3f3"
        forwardedRef={ref}
      />
    );

    const input = getByTestId("color-ref");

    expect(input).toBe(ref.current);
  });
});
