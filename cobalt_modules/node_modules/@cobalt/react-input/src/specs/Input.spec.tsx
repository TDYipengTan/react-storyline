import React from "react";
import { render } from "@testing-library/react";
import Input, { Type } from "../Input";
import { InputType } from "../InputTypes";

const noop = () => {};

describe("<Input />", () => {
  it("renders default with type text", () => {
    const { container } = render(<Input onChange={noop} value={""} />);

    expect(container).toMatchSnapshot();
  });

  it("renders with a ref", () => {
    const ref = React.createRef<InputType>();
    const { getByTestId } = render(
      <Input data-testid="ref" onChange={noop} value={""} forwardedRef={ref} />
    );

    const input = getByTestId("ref");

    expect(input).toBe(ref.current);
  });

  describe("renders all supported types", () => {
    const types: Type[] = ["url", "tel", "password", "number", "email", "text"];
    let index = types.length - 1;

    for (; index >= 0; index--) {
      const supportedType = types[index];

      it(`${supportedType}`, () => {
        const { getByTestId } = render(
          <Input
            data-testid={`type-${supportedType}`}
            onChange={noop}
            value=""
            type={supportedType}
          />
        );
        const input = getByTestId(`type-${supportedType}`);

        expect(input.getAttribute("type")).toBe(supportedType);
      });
    }
  });

  it("can be rendered disabled", () => {
    const { getByTestId } = render(
      <Input data-testid="test-disabled" onChange={noop} value="" disabled />
    );

    const input = getByTestId("test-disabled");

    expect(input.getAttribute("disabled")).not.toBeNull();
    expect(input.getAttribute("data-co-disabled")).toBe("true");
    expect(input.getAttribute("aria-disabled")).toBe("true");
  });

  it("can be rendered with small styling", () => {
    const { getByTestId } = render(
      <Input data-testid="test-small" onChange={noop} value="" size="small" />
    );

    const input = getByTestId("test-small");

    expect(input.classList).toContain("co-input--small");
  });

  it("can be rendered with medium styling", () => {
    const { getByTestId } = render(
      <Input data-testid="test-medium" onChange={noop} value="" size="medium" />
    );

    const input = getByTestId("test-medium");

    expect(input.classList).toContain("co-input--medium");
  });

  it("can be rendered with text align on left", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-left"
        onChange={noop}
        value=""
        textAlign="left"
      />
    );

    const input = getByTestId("test-left");

    expect(input.classList).toContain("co-input--align-left");
  });

  it("can be rendered with text align on center", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-center"
        onChange={noop}
        value=""
        textAlign="center"
      />
    );

    const input = getByTestId("test-center");

    expect(input.classList).toContain("co-input--align-center");
  });

  it("can be rendered with text align on right", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-right"
        onChange={noop}
        value=""
        textAlign="right"
      />
    );

    const input = getByTestId("test-right");

    expect(input.classList).toContain("co-input--align-right");
  });

  it("can be rendered with warning styling", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-warning"
        onChange={noop}
        value={""}
        variation={"warning"}
      />
    );

    const input = getByTestId("test-warning");

    expect(input.classList).toContain("co-input--warning");
  });

  it("can be rendered with error styling", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-error"
        onChange={noop}
        value=""
        variation="error"
      />
    );

    const input = getByTestId("test-error");

    expect(input.classList).toContain("co-input--error");
  });

  it("can be rendered with unstyled styling", () => {
    const { getByTestId } = render(
      <Input
        data-testid="test-unstyled"
        onChange={noop}
        value=""
        variation="unstyled"
      />
    );

    const input = getByTestId("test-unstyled");

    expect(input.classList).toContain("co-input--unstyled");
  });

  it("can be rendered without arrows", () => {
    const { getByTestId } = render(
      <Input data-testid="test-no-arrows" onChange={noop} noArrows value="" />
    );

    const input = getByTestId("test-no-arrows");

    expect(input.classList).toContain("co-input--no-arrows");
  });

  describe("when it is of type checkbox", () => {
    it("renders a checkbox", () => {
      const { container } = render(
        <Input onChange={noop} type="checkbox" value="v" />
      );

      expect(container).toMatchSnapshot();
    });

    it("renders with props", () => {
      const { getByTestId } = render(
        <Input
          data-testid="test-checkbox"
          onChange={noop}
          type="checkbox"
          name="example"
          value="v1"
        />
      );

      const input = getByTestId("test-checkbox");

      expect(input.getAttribute("name")).toEqual("example");
      expect(input.getAttribute("value")).toEqual("v1");
    });
  });

  describe("when it is of type radio", () => {
    it("renders a radio", () => {
      const { container } = render(
        <Input onChange={noop} type="radio" value="v" />
      );

      expect(container).toMatchSnapshot();
    });

    it("renders with props", () => {
      const { getByTestId } = render(
        <Input
          data-testid="test-radio"
          onChange={noop}
          type="radio"
          name="example"
          value="v1"
        />
      );

      const input = getByTestId("test-radio");

      expect(input.getAttribute("name")).toEqual("example");
      expect(input.getAttribute("value")).toEqual("v1");
    });
  });
});
