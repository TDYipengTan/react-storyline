import React, { FunctionComponent, InputHTMLAttributes, Ref } from "react";
import cc from "classcat";
import styles from "@cobalt/css-input";
import Checkbox from "./Checkbox";
import Radio from "./Radio";
import Color from "./Color";
import { InputType } from "./InputTypes";

export type Type =
  | "text"
  | "email"
  | "number"
  | "password"
  | "tel"
  | "url"
  | "checkbox"
  | "radio"
  | "color";

type Size = "small" | "medium";
type Variation = "error" | "warning" | "unstyled";
type TextAlign = "left" | "center" | "right";

type Styles = typeof styles;

type InputAttributes = Omit<
  InputHTMLAttributes<InputType>,
  "type" | "size" | "defaultValue" | "defaultChecked"
>;

export interface Props extends InputAttributes {
  noArrows?: boolean;
  size?: Size;
  textAlign?: TextAlign;
  type?: Type;
  variation?: Variation;
  forwardedRef?: Ref<InputType>;
}

type ModifiersTypes = Size | TextAlign | Variation;

const classModifiers: { [k in ModifiersTypes]: keyof Styles } = {
  small: "co-input--small",
  medium: "co-input--medium",
  left: "co-input--align-left",
  center: "co-input--align-center",
  right: "co-input--align-right",
  error: "co-input--error",
  warning: "co-input--warning",
  unstyled: "co-input--unstyled"
};

const getModifierClass = (modifier: ModifiersTypes | undefined) =>
  modifier && styles[classModifiers[modifier]];

const getComponentTag = (type: Type) => {
  switch (type) {
    case "checkbox":
      return Checkbox;
    case "radio":
      return Radio;
    case "color":
      return Color;
    default:
      return null;
  }
};

const Input: FunctionComponent<Props> = ({
  className = "",
  forwardedRef,
  noArrows,
  textAlign = "left",
  type = "text",
  size = "medium",
  variation,
  ...props
}) => {
  const classStyles = cc([
    styles["co-input"],
    getModifierClass(variation),
    styles[classModifiers[size]],
    styles[classModifiers[textAlign]],
    {
      [styles["co-input--no-arrows"]]: noArrows
    },
    className
  ]);
  const Tag = getComponentTag(type);

  if (Tag) {
    return (
      <Tag
        className={className}
        forwardedRef={forwardedRef}
        data-co-disabled={props.disabled || undefined}
        aria-disabled={props.disabled || undefined}
        {...props}
      />
    );
  }

  return (
    <input
      type={type}
      className={classStyles}
      ref={forwardedRef}
      data-co-disabled={props.disabled || undefined}
      aria-disabled={props.disabled || undefined}
      {...props}
    />
  );
};

export default Input;
