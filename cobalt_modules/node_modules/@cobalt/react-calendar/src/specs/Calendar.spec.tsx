import React from "react";
import { fireEvent, render } from "@testing-library/react";
import Calendar from "../Calendar";
import { CalendarType, DaysType } from "../types";

describe("<Calendar />", () => {
  const weekdays = {
    MON: "Mon",
    TUE: "Tue",
    WED: "Wed",
    THU: "Thu",
    FRI: "Fri",
    SAT: "Sat",
    SUN: "Sun"
  };

  it("renders a calendar", () => {
    const { container } = render(
      <Calendar month="9" year="2020" weekdays={weekdays} />
    );

    expect(container).toMatchSnapshot();
  });

  it("renders with other attributes", () => {
    const { getByTestId } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        data-prop="test"
        data-testid="test"
      />
    );

    expect(getByTestId("test").getAttribute("data-prop")).toEqual("test");
  });

  it("renders with the default & custom class", () => {
    const { getByTestId } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        className="customClassName"
        data-testid="test"
      />
    );

    expect(getByTestId("test").classList.value).toBe(
      "co-calendar customClassName"
    );
  });

  it("renders with a Ref", () => {
    const ref = React.createRef<CalendarType>();

    const { getByTestId } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        forwardedRef={ref}
        data-testid="test"
      />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders starting on a specific weekday", () => {
    const { getByText } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        weekStart="WED"
        data-testid="calendar"
      />
    );

    const wedEl = getByText("Wed");

    expect(wedEl.parentElement!.firstChild).toBe(wedEl);
  });

  it("renders selected days", () => {
    const selectDays: DaysType = [
      11,
      { end: 2 },
      { start: 5, end: 7 },
      { start: 29 }
    ];

    const { getByText } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        selectedDays={selectDays}
        data-testid="calendar"
      />
    );

    expect(getByText("11").parentElement!.classList).toContain(
      "co-calendar__day--selected"
    );
    expect(getByText("1").parentElement!.classList.value).toContain(
      "co-calendar__day--selected co-calendar__day--range"
    );
    expect(getByText("2").parentElement!.classList.value).toContain(
      "co-calendar__day--selected co-calendar__day--range co-calendar__day--range-last"
    );

    expect(getByText("5").parentElement!.classList.value).toContain(
      "co-calendar__day--selected co-calendar__day--range co-calendar__day--range-first"
    );
    expect(getByText("6").parentElement!.classList.value).toContain(
      "co-calendar__day--selected co-calendar__day--range"
    );
    expect(getByText("7").parentElement!.classList.value).toContain(
      "co-calendar__day--selected co-calendar__day--range co-calendar__day--range-last"
    );

    expect(getByText("29").parentElement!.classList.value).toContain(
      "co-calendar__day--selected co-calendar__day--range co-calendar__day--range-first"
    );
    expect(getByText("30").parentElement!.classList.value).toContain(
      "co-calendar__day--selected co-calendar__day--range"
    );
  });

  it("renders highlighted days", () => {
    const highlighted: DaysType = [
      11,
      { end: 2 },
      { start: 5, end: 7 },
      { start: 29 }
    ];

    const { getByText } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        highlightedDays={highlighted}
        data-testid="calendar"
      />
    );

    ["1", "2", "5", "6", "7", "11", "29", "30"].forEach(day =>
      expect(getByText(day).parentElement!.classList).toContain(
        "co-calendar__day--highlighted"
      )
    );
  });

  it("renders disabled days", () => {
    const disabledDays: DaysType = [
      11,
      { end: 2 },
      { start: 5, end: 7 },
      { start: 29 }
    ];

    const { getByText } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        disabledDays={disabledDays}
        data-testid="calendar"
      />
    );

    ["1", "2", "5", "6", "7", "11", "29", "30"].forEach(day => {
      const attributes = getByText(day).parentElement!.getAttributeNames();
      expect(attributes).toContain("data-co-disabled");
      expect(attributes).toContain("aria-disabled");
    });
  });

  it("calls the given on click callback", () => {
    const onClick = jest.fn();
    const { getByText } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        data-testid="calendar"
        onDayClick={onClick}
      />
    );

    const day3 = getByText("3");

    fireEvent.click(day3);

    expect(onClick).toBeCalledWith({ day: 3, month: 9, year: 2020 });
    expect(getByText("1").classList).toContain(
      "co-calendar__day-inner--selectable"
    );
  });

  it("calls the given on hover callback", () => {
    const onHover = jest.fn();
    const { getByText } = render(
      <Calendar
        month="9"
        year="2020"
        weekdays={weekdays}
        data-testid="calendar"
        onDayMouseEnter={onHover}
      />
    );

    const day3 = getByText("3");

    fireEvent.mouseEnter(day3);

    expect(onHover).toBeCalledWith({ day: 3, month: 9, year: 2020 });
    expect(getByText("1").classList).toContain(
      "co-calendar__day-inner--selectable"
    );
  });

  it("throws an error when year value is not a integer", () => {
    const spy = jest.spyOn(console, "error");
    spy.mockImplementation(() => {});

    const wrapper = () =>
      render(
        <Calendar
          month="9"
          year={2020.2}
          weekdays={weekdays}
          data-testid="calendar"
        />
      );

    expect(wrapper).toThrowError(
      "Invalid value: the specified value for month or year is not valid."
    );
    spy.mockRestore();
  });
});
