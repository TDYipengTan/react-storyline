@mixin generate-button(
  $type: "default",
  $background: null,
  $foreground: null,
  $border: null,
  $shadow: null
) {
  background-color: get-button-color($background);
  color: get-button-color($foreground);
  transition-property: background-color, color, border-color, box-shadow;

  &:not([disabled]):not([data-co-disabled]) {
    &[data-co-hover],
    &:hover {
      background-color: get-button-color($background, "hover");
      color: get-button-color($foreground, "hover");
    }

    &[data-co-active],
    &:active {
      background-color: get-button-color($background, "active");
    }
  }

  &[data-co-focus],
  &:focus {
    box-shadow: 0 0 0 3px $shadow;
    color: get-button-color($foreground);
  }

  @if $type == "outline" {
    border-color: get-button-color($border);

    &:not([disabled]):not([data-co-disabled]) {
      &[data-co-hover],
      &:hover {
        border-color: get-button-color($border, "hover");
      }

      &[data-co-active],
      &:active {
        border-color: get-button-color($border, "active");
        color: get-button-color($foreground, "active");
      }
    }
  } @else if $type == "text" {
    &:not([disabled]):not([data-co-disabled]) {
      &[data-co-active],
      &:active {
        color: get-button-color($foreground, "active");
      }
    }
  }
}

@function get-button-color($color-map, $state: "default") {
  @if map-has-key($color-map, $state) {
    @return map-get($color-map, $state);
  } @else {
    @return map-get($color-map, "default");
  }
}
