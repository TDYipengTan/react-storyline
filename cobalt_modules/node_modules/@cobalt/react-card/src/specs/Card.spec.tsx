import React from "react";
import Card, { CardType } from "../Card";
import { render, fireEvent } from "@testing-library/react";

const CARD_OUTLINED_CLASS = "co-card--outlined";
const CARD_CLICKABLE_CLASS = "co-card--clickable";

describe("<Card />", () => {
  it("renders", () => {
    const { container } = render(
      <Card>
        <header>
          <h1>Basic Card</h1>
        </header>
        <article>
          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Iusto vel
          atque illum incidunt sunt temporibus.
        </article>
        <footer>TD- - 2020</footer>
      </Card>
    );

    expect(container).toMatchSnapshot();
  });

  it("renders with a ref", () => {
    const ref = React.createRef<CardType>();

    const { getByTestId } = render(
      <Card forwardedRef={ref} data-testid="test">
        <article>
          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Iusto vel
          atque illum incidunt sunt temporibus.
        </article>
      </Card>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders with correct class modifier when outlined prop is truthy", () => {
    const wrapper = render(<Card outlined>Outlined Card</Card>);

    expect(wrapper.getByText("Outlined Card").classList).toContain(
      CARD_OUTLINED_CLASS
    );
  });

  describe("when an onClick prop is passed", () => {
    it("renders with the correct modifier class", () => {
      const clickSpy = jest.fn();
      const wrapper = render(<Card onClick={clickSpy}>Clickable Card</Card>);

      expect(wrapper.getByText("Clickable Card").classList).toContain(
        CARD_CLICKABLE_CLASS
      );
    });

    it("it calls/triggers the onClick callback", () => {
      const clickSpy = jest.fn();
      const wrapper = render(<Card onClick={clickSpy}>Clickable Card</Card>);

      fireEvent.click(wrapper.getByText("Clickable Card"));

      expect(clickSpy).toHaveBeenCalledTimes(1);
    });
  });

  describe("when an onKeyPress prop is passed", () => {
    it("renders with the correct modifier class", () => {
      const keySpy = jest.fn();
      const wrapper = render(<Card onKeyPress={keySpy}>Clickable Card</Card>);

      expect(wrapper.getByText("Clickable Card").classList).toContain(
        CARD_CLICKABLE_CLASS
      );
    });

    it("calls the onKeyPress callback when the Enter key is pressed", () => {
      const keySpy = jest.fn();
      const wrapper = render(<Card onKeyPress={keySpy}>Clickable Card</Card>);

      fireEvent.keyPress(wrapper.getByText("Clickable Card"), {
        key: "Enter",
        charCode: 13
      });

      expect(keySpy).toHaveBeenCalledTimes(1);
    });

    it("does not call the onKeyPress callback when a key other than ENTER is pressed", () => {
      const keySpy = jest.fn();
      const wrapper = render(<Card onKeyPress={keySpy}>Clickable Card</Card>);

      fireEvent.keyPress(wrapper.getByText("Clickable Card"), {
        key: "a",
        charCode: 65
      });

      expect(keySpy).toHaveBeenCalledTimes(0);
    });
  });
});
