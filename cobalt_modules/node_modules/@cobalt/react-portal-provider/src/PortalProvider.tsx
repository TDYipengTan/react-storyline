import React, {
  FunctionComponent,
  ReactNode,
  useState,
  useEffect,
  createContext,
  useContext,
  useMemo,
} from "react";
import ReactDOM from "react-dom";

const DEFAULT_CONTAINER_ID = "co-portal-container";
const DEFAULT_ID = "co-portal";
const PortalContext = createContext<{
  element: Element | null;
  containerId: string;
}>({
  element: null,
  containerId: DEFAULT_CONTAINER_ID,
});

export interface Props {
  children?: ReactNode;
  containerId?: string;
}

export const usePortal = () => {
  const portal = useContext(PortalContext);

  if (!portal) {
    throw new Error("You must use a PortalProvider to get a portal.");
  }

  return portal;
};

const Portal: FunctionComponent<{ children: ReactNode }> = ({ children }) => {
  const { element } = usePortal();

  return ReactDOM.createPortal(children, element as Element);
};

const getPortalElement = (containerId: string, containerElement: Element) => {
  const dataContainerId = `data-${containerId}`;
  let portal = containerElement.querySelector(`[${dataContainerId}]`);

  if (portal) {
    return portal;
  }

  portal = document.createElement("div");
  portal.setAttribute(dataContainerId, "true");
  portal.setAttribute(
    "style",
    "position: fixed; top: 0; left: 0; width: 0; height: 0; z-index: 1400"
  );

  containerElement.appendChild(portal);

  return portal;
};

const PortalProvider: FunctionComponent<Props> = ({
  children,
  containerId,
}) => {
  const [portal, setPortal] = useState<Element | null>(null);

  useEffect(() => {
    const container = document.getElementById(
      containerId || DEFAULT_CONTAINER_ID
    );

    if (!container) {
      throw new Error(`There is no element with the "${containerId}" id.`);
    }

    const portalId = containerId
      ? `${DEFAULT_ID}-${containerId}`
      : `${DEFAULT_ID}-default-container`;

    const portal = getPortalElement(portalId, container);

    setPortal(portal);

    return () => {
      const portal = container.querySelector(`[data-${portalId}]`);

      if (portal) {
        portal.remove();
      }

      setPortal(null);
    };
  }, [containerId]);

  const providerValue = useMemo(
    () => ({
      element: portal,
      containerId: containerId || DEFAULT_CONTAINER_ID,
    }),
    [containerId, portal]
  );

  return (
    <PortalContext.Provider value={providerValue}>
      {portal ? children : null}
      {!containerId ? <div id={DEFAULT_CONTAINER_ID} /> : null}
    </PortalContext.Provider>
  );
};

export { Portal };
export default PortalProvider;
