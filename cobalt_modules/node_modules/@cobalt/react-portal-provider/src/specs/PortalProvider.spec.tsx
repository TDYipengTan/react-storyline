import React from "react";
import { render, getByText } from "@testing-library/react";
import PortalProvider, { Portal } from "../PortalProvider";

describe("<PortalProvider />", () => {
  it("renders the portal inside a default container", () => {
    const { baseElement } = render(<PortalProvider />);

    expect(baseElement).toMatchSnapshot();
  });

  it("renders the portal inside a given container", () => {
    const { baseElement } = render(<div id="destination" />);

    render(<PortalProvider containerId="destination" />);

    expect(baseElement).toMatchSnapshot();
  });

  it("throws an error when the container does not exist", () => {
    // Even though the error is caught, it still gets printed to the console
    // so we mock that out to avoid the wall of red text.
    const spy = jest.spyOn(console, "error");
    spy.mockImplementation(() => {});

    const renderer = () => render(<PortalProvider containerId="destination" />);

    expect(renderer).toThrow(`There is no element with the "destination" id.`);

    spy.mockRestore();
  });

  it("does not create a new portal container if one already exists", () => {
    const { baseElement } = render(
      <div id="destination">
        <div data-co-portal-destination={true}>Custom node</div>
      </div>
    );

    render(
      <PortalProvider containerId="destination">
        <p>Some Text</p>
      </PortalProvider>
    );

    const portals = baseElement.querySelectorAll(
      "[data-co-portal-destination]"
    );

    expect(portals.length).toBe(1);
  });

  it("updates the portal when the container changes", () => {
    const { getByTestId } = render(
      <>
        <div id="initial" data-testid="initial-container" />
        <div id="new" data-testid="new-container" />
      </>
    );

    const initialContainer = getByTestId("initial-container");
    const newContainer = getByTestId("new-container");

    const { rerender } = render(<PortalProvider containerId="initial" />);

    expect(newContainer.querySelector("[data-co-portal-new]")).toBe(null);

    rerender(<PortalProvider containerId="new" />);

    expect(initialContainer.querySelector("[data-co-portal-initial]")).toBe(
      null
    );
    expect(newContainer.querySelector("[data-co-portal-new]")).not.toBe(null);
  });

  it("renders the portal contents inside the correct container", () => {
    const { container } = render(<div id="destination" />);

    render(
      <PortalProvider containerId="destination">
        <Portal>
          <p>This will be rendered inside the portal container</p>
        </Portal>
      </PortalProvider>
    );

    const portalContent = getByText(
      container,
      "This will be rendered inside the portal container"
    );
    const portalContainer = portalContent.parentElement!;

    expect(
      portalContainer.hasAttribute("data-co-portal-destination")
    ).toBeTruthy();
  });

  it("moves the portal content when the container changes", () => {
    const { getByTestId } = render(
      <>
        <div id="initial" data-testid="initial-container" />
        <div id="new" data-testid="new-container" />
      </>
    );

    const { rerender } = render(
      <PortalProvider containerId="initial">
        <Portal>
          <span>Portal content</span>
        </Portal>
      </PortalProvider>
    );

    const initialContainer = getByTestId("initial-container");
    const newContainer = getByTestId("new-container");

    const initialPortalContainer = getByText(initialContainer, "Portal content")
      .parentElement!;
    expect(
      initialPortalContainer.hasAttribute("data-co-portal-initial")
    ).toBeTruthy();

    rerender(
      <PortalProvider containerId="new">
        <Portal>
          <span>Portal content</span>
        </Portal>
      </PortalProvider>
    );

    const newPortalContainer = getByText(newContainer, "Portal content")
      .parentElement!;
    expect(newPortalContainer.hasAttribute("data-co-portal-new")).toBeTruthy();
  });
});
