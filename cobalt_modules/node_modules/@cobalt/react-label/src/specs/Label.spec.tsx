import React from "react";
import { render } from "@testing-library/react";
import Label, { LabelType } from "../Label";

describe("<Label />", () => {
  it("renders", () => {
    const { container } = render(<Label htmlFor="label">label</Label>);

    expect(container).toMatchSnapshot();
  });

  it("renders with custom attribute", () => {
    const { getByText } = render(
      <Label htmlFor="label" data-test="test">
        label
      </Label>
    );

    expect(getByText("label").getAttribute("data-test")).toEqual("test");
  });

  it("renders with default and custom class", () => {
    const wrapper = render(
      <Label htmlFor="label" className="co-hello">
        Custom className
      </Label>
    );

    expect(wrapper.getByText("Custom className").classList.value).toBe(
      "co-label co-hello"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<LabelType>();

    const { getByTestId } = render(
      <Label forwardedRef={ref} htmlFor="label" data-testid="test">
        Ref
      </Label>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders a warning label", () => {
    const { getByText } = render(
      <Label htmlFor="label" type="warning">
        label
      </Label>
    );

    expect(getByText("label").classList).toContain("co-label--warning");
  });

  it("renders a error label", () => {
    const { getByText } = render(
      <Label htmlFor="label" type="error">
        label
      </Label>
    );

    expect(getByText("label").classList).toContain("co-label--error");
  });
});
