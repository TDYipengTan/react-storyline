import React, { FunctionComponent, HTMLAttributes, Ref } from "react";
import cc from "classcat";
import { Transition } from "react-transition-group";
import { TransitionStatus } from "react-transition-group/Transition";
import styles from "@cobalt/css-popup";

type Size = "small" | "medium" | "large";
type Shape = "compact";
type Variation = "light" | "dark" | "error";
type Styles = typeof styles;

export type PopupType = HTMLDivElement;

export interface Props extends HTMLAttributes<PopupType> {
  size?: Size;
  shape?: Shape;
  /** deprecated */
  dark?: boolean;
  variation?: Variation;
  visible?: boolean;
  forwardedRef?: Ref<PopupType>;
}

const duration = 200;
const defaultStyle = {
  transition: `opacity ${duration}ms ease-in-out`,
};

const getTransitionAttributes = (status: TransitionStatus) => ({
  "data-transition": status,
});

type ModifiersTypes = Variation | Size | Shape;

const classModifiers: { [k in ModifiersTypes]: keyof Styles } = {
  small: "co-popup--small",
  medium: "co-popup--medium",
  large: "co-popup--large",
  light: "co-popup--light",
  dark: "co-popup--dark",
  error: "co-popup--error",
  compact: "co-popup--compact",
};

const getModifierClass = (modifier: ModifiersTypes | undefined) =>
  modifier && styles[classModifiers[modifier]];

const Popup: FunctionComponent<Props> = ({
  className = "",
  forwardedRef,
  variation = "light",
  dark,
  size = "medium",
  shape,
  visible,
  style,
  children,
  ...props
}) => {
  const classStyles = [
    styles["co-popup"],
    getModifierClass(variation),
    getModifierClass(size),
    getModifierClass(shape),
    {
      [styles["co-popup--dark"]]: dark,
    },
    className,
  ];

  return (
    <Transition
      in={visible}
      mountOnEnter
      unmountOnExit
      timeout={{ enter: 0, exit: duration }}
    >
      {(status) => (
        <div
          className={cc(classStyles)}
          ref={forwardedRef}
          style={{
            ...defaultStyle,
            ...style,
          }}
          {...props}
          {...getTransitionAttributes(status)}
        >
          {status !== "exited" ? children : null}
        </div>
      )}
    </Transition>
  );
};

export default Popup;
