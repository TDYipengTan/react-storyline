import React from "react";
import { render } from "@testing-library/react";
import Popup, { PopupType } from "../Popup";
import { config } from "react-transition-group";

config.disabled = true;

describe("<Popup />", () => {
  it("renders", () => {
    const { container } = render(<Popup visible>Popup</Popup>);

    expect(container).toMatchSnapshot();
  });

  it("receives custom attribute", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" data-custom="custom-attribute" visible>
        Popup
      </Popup>
    );

    expect(getByTestId("test").getAttribute("data-custom")).toEqual(
      "custom-attribute"
    );
  });

  it("renders with default and additional classes", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" className="new-class" visible>
        Popup
      </Popup>
    );

    expect(getByTestId("test").classList.value).toBe(
      "co-popup co-popup--light co-popup--medium new-class"
    );
  });

  it("renders with default and additional styles", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" style={{ color: "red" }} visible>
        Popup
      </Popup>
    );

    expect(getByTestId("test").getAttribute("style")).toBe(
      "transition: opacity 200ms ease-in-out; color: red;"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<PopupType>();

    const { getByTestId } = render(
      <Popup data-testid="test" forwardedRef={ref} visible>
        Popup
      </Popup>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders the content when visible", () => {
    const { getByText } = render(<Popup visible>Popup</Popup>);

    expect(getByText("Popup")).toBeDefined();
  });

  it("renders a small popup", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" size="small" visible>
        Popup
      </Popup>
    );

    const popupClassList = getByTestId("test").classList;

    expect(popupClassList).toContain("co-popup--small");
  });

  it("renders a medium popup", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" size="medium" visible>
        Popup
      </Popup>
    );

    expect(getByTestId("test").classList).toContain("co-popup--medium");
  });

  it("renders a large popup", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" size="large" visible>
        Popup
      </Popup>
    );

    const popupClassList = getByTestId("test").classList;

    expect(popupClassList).toContain("co-popup--large");
  });

  it("renders a compact popup", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" shape="compact" visible>
        Popup
      </Popup>
    );

    const popupClassList = getByTestId("test").classList;

    expect(popupClassList).toContain("co-popup--compact");
  });

  it("renders a light popup", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" variation="light" visible>
        Popup
      </Popup>
    );

    const popupClassList = getByTestId("test").classList;

    expect(popupClassList).toContain("co-popup--light");
  });

  it("renders a dark popup", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" variation="dark" visible>
        Popup
      </Popup>
    );

    const popupClassList = getByTestId("test").classList;

    expect(popupClassList).toContain("co-popup--dark");
  });

  it("renders a dark popup with the deprecated prop", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" dark visible>
        Popup
      </Popup>
    );

    const popupClassList = getByTestId("test").classList;

    expect(popupClassList).toContain("co-popup--dark");
  });

  it("renders a error popup", () => {
    const { getByTestId } = render(
      <Popup data-testid="test" variation="error" visible>
        Popup
      </Popup>
    );

    const popupClassList = getByTestId("test").classList;

    expect(popupClassList).toContain("co-popup--error");
  });
});
