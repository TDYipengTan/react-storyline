import React from "react";
import { render } from "@testing-library/react";
import Flag, { FlagType } from "../Flag";

describe("<Flag />", () => {
  it("renders", () => {
    const { container } = render(<Flag code="pt" />);

    expect(container).toMatchSnapshot();
  });

  it("renders a flag with other attributes", () => {
    const { getByTestId } = render(<Flag code="pt" data-testid="flag" />);

    expect(getByTestId("flag")).toBeDefined();
  });

  it("renders the default and custom class", () => {
    const { getByTestId } = render(
      <Flag code="pt" className="custom-class" data-testid="flag" />
    );

    const { classList } = getByTestId("flag");

    expect(classList.value).toBe(
      "co-flag co-flag--pt co-flag--small custom-class"
    );
  });

  it("renders with custom styles", () => {
    const { getByTestId } = render(
      <Flag code="pt" style={{ width: 300 }} data-testid="flag" />
    );
    const flag = getByTestId("flag");

    expect(flag.style.width).toBe("300px");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<FlagType>();

    const { getByTestId } = render(
      <Flag code="pt" forwardedRef={ref} data-testid="flag" />
    );

    expect(getByTestId("flag")).toBe(ref.current);
  });

  it("renders a tiny flag", () => {
    const { getByTestId } = render(
      <Flag code="pt" size="tiny" data-testid="flag" />
    );

    const flagClassList = getByTestId("flag").classList;

    expect(flagClassList).toContain("co-flag--tiny");
  });

  it("renders a small flag", () => {
    const { getByTestId } = render(
      <Flag code="pt" size="small" data-testid="flag" />
    );
    const flagClassList = getByTestId("flag").classList;

    expect(flagClassList).toContain("co-flag--small");
  });

  it("renders a medium flag", () => {
    const { getByTestId } = render(
      <Flag code="pt" size="medium" data-testid="flag" />
    );
    const flagClassList = getByTestId("flag").classList;

    expect(flagClassList).toContain("co-flag--medium");
  });

  it("renders a large flag", () => {
    const { getByTestId } = render(
      <Flag code="pt" size="large" data-testid="flag" />
    );
    const flagClassList = getByTestId("flag").classList;

    expect(flagClassList).toContain("co-flag--large");
  });

  it("renders a xlarge flag", () => {
    const { getByTestId } = render(
      <Flag code="pt" size="xlarge" data-testid="flag" />
    );
    const flagClassList = getByTestId("flag").classList;

    expect(flagClassList).toContain("co-flag--xlarge");
  });
});
