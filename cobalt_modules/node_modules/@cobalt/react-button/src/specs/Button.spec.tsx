import React from "react";
import { render } from "@testing-library/react";
import Button, { ButtonType } from "../Button";

describe("<Button />", () => {
  it("renders a button", () => {
    const { container } = render(<Button>Default</Button>);

    expect(container).toMatchSnapshot();
  });

  it("renders a button with other attributes", () => {
    const { getByText } = render(
      <Button data-prop="test" disabled>
        Data Prop Button
      </Button>
    );

    expect(getByText("Data Prop Button").getAttribute("data-prop")).toEqual(
      "test"
    );
  });

  it("can receive a custom html type prop", () => {
    const { getByText } = render(
      <Button htmlType="submit">Button with HTMLType</Button>
    );

    expect(getByText("Button with HTMLType").getAttribute("type")).toEqual(
      "submit"
    );
  });

  it("renders a button with the default & custom class", () => {
    const { getByText } = render(
      <Button className="customClassName">loremipsum</Button>
    );

    const { classList } = getByText("loremipsum");

    expect(classList.value).toBe(
      "co-button co-button--primary co-button--medium customClassName"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<ButtonType>();

    const { getByTestId } = render(
      <Button forwardedRef={ref} data-testid="test">
        Test
      </Button>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders an outline button", () => {
    const { getByText } = render(<Button variation="outline">Outline</Button>);

    expect(getByText("Outline").classList).toContain("co-button--outline");
  });

  it("renders a transparent button", () => {
    const { getByText } = render(
      <Button variation="transparent">Transparent</Button>
    );

    expect(getByText("Transparent").classList).toContain(
      "co-button--transparent"
    );
  });

  it("renders a secondary button", () => {
    const { getByText } = render(<Button type="secondary">Secondary</Button>);

    expect(getByText("Secondary").classList).toContain("co-button--secondary");
  });

  it("renders an info button", () => {
    const { getByText } = render(<Button type="info">Info</Button>);

    expect(getByText("Info").classList).toContain("co-button--info");
  });

  it("renders a success button", () => {
    const { getByText } = render(<Button type="success">Success</Button>);

    expect(getByText("Success").classList).toContain("co-button--success");
  });

  it("renders a danger button", () => {
    const { getByText } = render(<Button type="danger">Danger</Button>);

    expect(getByText("Danger").classList).toContain("co-button--danger");
  });

  it("renders a warning button", () => {
    const { getByText } = render(<Button type="warning">Warning</Button>);

    expect(getByText("Warning").classList).toContain("co-button--warning");
  });

  it("renders a feature button", () => {
    const { getByText } = render(<Button type="feature">Feature</Button>);

    expect(getByText("Feature").classList).toContain("co-button--feature");
  });

  it("renders a mono dark button", () => {
    const { getByText } = render(<Button type="mono-dark">Mono Dark</Button>);

    expect(getByText("Mono Dark").classList).toContain("co-button--mono-dark");
  });

  it("renders a mono light button", () => {
    const { getByText } = render(<Button type="mono-light">Mono Light</Button>);

    expect(getByText("Mono Light").classList).toContain(
      "co-button--mono-light"
    );
  });

  it("renders a small button", () => {
    const { getByText } = render(<Button size="small">Small</Button>);

    const buttonClassList = getByText("Small").classList;

    expect(buttonClassList).toContain("co-button--small");
  });

  it("renders a medium button", () => {
    const { getByText } = render(<Button size="medium">Medium</Button>);

    expect(getByText("Medium").classList).toContain("co-button--medium");
  });

  it("renders a full width button", () => {
    const { getByText } = render(
      <Button shape="full-width">Full Width</Button>
    );

    expect(getByText("Full Width").classList).toContain(
      "co-button--full-width"
    );
  });

  it("renders a compacted button", () => {
    const { getByText } = render(<Button shape="compact">Compacted</Button>);

    expect(getByText("Compacted").classList).toContain("co-button--compact");
  });
});
