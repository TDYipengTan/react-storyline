import React from "react";
import { render } from "@testing-library/react";
import LinkButton, { LinkButtonType } from "../LinkButton";

describe("<LinkButton />", () => {
  it("renders a link button", () => {
    const { container } = render(<LinkButton href="#">Default</LinkButton>);

    expect(container).toMatchSnapshot();
  });

  it("renders a link button with other attributes", () => {
    const { getByText } = render(
      <LinkButton data-prop="test">Data Prop Button</LinkButton>
    );

    expect(getByText("Data Prop Button").getAttribute("data-prop")).toEqual(
      "test"
    );
  });

  it("renders a button with the default & custom class", () => {
    const { getByText } = render(
      <LinkButton className="customClassName">loremipsum</LinkButton>
    );

    const { classList } = getByText("loremipsum");

    expect(classList.value).toBe(
      "co-button co-button--transparent co-button--primary co-button--medium customClassName"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<LinkButtonType>();

    const { getByTestId } = render(
      <LinkButton forwardedRef={ref} data-testid="test">
        Test
      </LinkButton>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders a link secondary button", () => {
    const { getByText } = render(
      <LinkButton type="secondary">Secondary</LinkButton>
    );

    expect(getByText("Secondary").classList).toContain("co-button--secondary");
  });

  it("renders a success link button", () => {
    const { getByText } = render(
      <LinkButton type="success">Success</LinkButton>
    );

    expect(getByText("Success").classList).toContain("co-button--success");
  });

  it("renders a danger link button", () => {
    const { getByText } = render(<LinkButton type="danger">Danger</LinkButton>);

    expect(getByText("Danger").classList).toContain("co-button--danger");
  });

  it("renders a warning link button", () => {
    const { getByText } = render(
      <LinkButton type="warning">Warning</LinkButton>
    );

    expect(getByText("Warning").classList).toContain("co-button--warning");
  });

  it("renders a feature link button", () => {
    const { getByText } = render(
      <LinkButton type="feature">Feature</LinkButton>
    );

    expect(getByText("Feature").classList).toContain("co-button--feature");
  });

  it("renders a mono-dark link button", () => {
    const { getByText } = render(
      <LinkButton type="mono-dark">Mono Dark</LinkButton>
    );

    expect(getByText("Mono Dark").classList).toContain("co-button--mono-dark");
  });

  it("renders a mono light link button", () => {
    const { getByText } = render(
      <LinkButton type="mono-light">Mono Light</LinkButton>
    );

    expect(getByText("Mono Light").classList).toContain(
      "co-button--mono-light"
    );
  });

  it("renders a small link button", () => {
    const { getByText } = render(<LinkButton size="small">Small</LinkButton>);

    const buttonClassList = getByText("Small").classList;

    expect(buttonClassList).toContain("co-button--small");
  });

  it("renders a full width link button", () => {
    const { getByText } = render(
      <LinkButton shape="full-width">Full Width</LinkButton>
    );

    expect(getByText("Full Width").classList).toContain(
      "co-button--full-width"
    );
  });

  it("renders a compacted link button", () => {
    const { getByText } = render(
      <LinkButton shape="compact">Compacted</LinkButton>
    );

    expect(getByText("Compacted").classList).toContain("co-button--compact");
  });

  describe("when is disabled", () => {
    it("renders a disabled link button with data-co-disabled attribute", () => {
      const { getByText } = render(<LinkButton disabled>Disabled</LinkButton>);

      expect(
        getByText("Disabled").hasAttribute("data-co-disabled")
      ).toBeTruthy();
    });

    it("renders with aria-disabled attribute", () => {
      const { getByText } = render(<LinkButton disabled>Disabled</LinkButton>);

      expect(getByText("Disabled").hasAttribute("aria-disabled")).toBeTruthy();
    });
  });
});
