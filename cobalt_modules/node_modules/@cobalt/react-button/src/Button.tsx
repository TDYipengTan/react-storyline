import React, { FunctionComponent, ButtonHTMLAttributes, Ref } from "react";
import cc from "classcat";
import styles from "@cobalt/css-button";

type Variation = "outline" | "transparent";
export type Type =
  | "primary"
  | "secondary"
  | "info"
  | "danger"
  | "warning"
  | "success"
  | "feature"
  | "mono-dark"
  | "mono-light";

export type Size = "small" | "medium";
export type Shape = "full-width" | "compact";

export type Styles = typeof styles;

export type ButtonType = HTMLButtonElement;

type ButtonAttributes = Omit<ButtonHTMLAttributes<ButtonType>, "type">;

export interface Props extends ButtonAttributes {
  htmlType?: ButtonHTMLAttributes<ButtonType>["type"];
  shape?: Shape;
  size?: Size;
  type?: Type;
  variation?: Variation;
  forwardedRef?: Ref<ButtonType>;
}

export type Modifier = Type | Variation | Size | Shape;
export const classModifiers: { [k in Modifier]: keyof Styles } = {
  primary: "co-button--primary",
  secondary: "co-button--secondary",
  info: "co-button--info",
  danger: "co-button--danger",
  warning: "co-button--warning",
  success: "co-button--success",
  feature: "co-button--feature",
  outline: "co-button--outline",
  transparent: "co-button--transparent",
  small: "co-button--small",
  medium: "co-button--medium",
  compact: "co-button--compact",
  "mono-dark": "co-button--mono-dark",
  "mono-light": "co-button--mono-light",
  "full-width": "co-button--full-width",
};

const getClassName = (modifier: Modifier | undefined) =>
  modifier && styles[classModifiers[modifier]];

const Button: FunctionComponent<Props> = ({
  className = "",
  forwardedRef,
  variation,
  type = "primary",
  size = "medium",
  shape,
  htmlType,
  ...props
}) => {
  const classStyles = [
    styles["co-button"],
    styles[classModifiers[type]],
    styles[classModifiers[size]],
    getClassName(variation),
    getClassName(shape),
    className,
  ];

  return (
    <button
      type={htmlType}
      className={cc(classStyles)}
      ref={forwardedRef}
      {...props}
    />
  );
};

export default Button;
