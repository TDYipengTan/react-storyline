import React from "react";
import { render } from "@testing-library/react";
import Tab, { TabType } from "../Tab";

describe("<Tab />", () => {
  it("renders", () => {
    const { container } = render(<Tab />);

    expect(container).toMatchSnapshot();
  });

  it("renders a disabled tab", () => {
    const { container } = render(<Tab disabled />);

    expect(container).toMatchSnapshot();
  });

  it("receives custom attribute", () => {
    const { getByText } = render(<Tab data-custom="custom-attribute">Tab</Tab>);

    expect(getByText("Tab").getAttribute("data-custom")).toEqual(
      "custom-attribute"
    );
  });

  it("renders with default and additional classes", () => {
    const { getByTestId } = render(
      <Tab data-testid="test" className="new-class" />
    );

    expect(getByTestId("test").classList.value).toBe(
      "co-tab co-tab--medium new-class"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<TabType>();

    const { getByTestId } = render(
      <Tab forwardedRef={ref} href="#tab" data-testid="test" />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders a tab active", () => {
    const { getByTestId } = render(<Tab data-testid="test" active />);

    expect(getByTestId("test").classList).toContain("co-tab--active");
  });

  it("renders a small tab", () => {
    const { getByTestId } = render(<Tab data-testid="test" size="small" />);

    expect(getByTestId("test").classList).toContain("co-tab--small");
  });

  it("renders a medium tab", () => {
    const { getByTestId } = render(<Tab data-testid="test" />);

    expect(getByTestId("test").classList).toContain("co-tab--medium");
  });

  it("can be rendered with disabled state", () => {
    const { getByTestId } = render(
      <Tab data-testid="test-disabled" disabled />
    );

    expect(
      getByTestId("test-disabled").hasAttribute("data-co-disabled")
    ).toBeTruthy();
  });
});
