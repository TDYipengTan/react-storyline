import React from "react";
import { render } from "@testing-library/react";
import Spinner, { SpinnerType } from "../Spinner";

describe("<Spinner />", () => {
  it("renders", () => {
    const { container } = render(<Spinner />);

    expect(container).toMatchSnapshot();
  });

  it("renders a spinner with other attributes", () => {
    const { getByText } = render(<Spinner data-prop="test">Test</Spinner>);

    expect(getByText("Test").getAttribute("data-prop")).toEqual("test");
  });

  it("renders a spinner with the default & custom class", () => {
    const { getByText } = render(
      <Spinner className="customClassName">Test</Spinner>
    );

    const { classList } = getByText("Test");

    expect(classList.value).toBe("co-spinner co-spinner--tiny customClassName");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<SpinnerType>();

    const { getByTestId } = render(
      <Spinner forwardedRef={ref} data-testid="test">
        Test
      </Spinner>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders a micro spinner", () => {
    const { getByText } = render(<Spinner size="micro">micro</Spinner>);

    const spinnerClassList = getByText("micro").classList;

    expect(spinnerClassList).toContain("co-spinner--micro");
  });

  it("renders a tiny spinner", () => {
    const { getByText } = render(<Spinner size="tiny">tiny</Spinner>);

    const spinnerClassList = getByText("tiny").classList;

    expect(spinnerClassList).toContain("co-spinner--tiny");
  });

  it("renders a small spinner", () => {
    const { getByText } = render(<Spinner size="small">small</Spinner>);

    const spinnerClassList = getByText("small").classList;

    expect(spinnerClassList).toContain("co-spinner--small");
  });

  it("renders a medium spinner", () => {
    const { getByText } = render(<Spinner size="medium">medium</Spinner>);

    const spinnerClassList = getByText("medium").classList;

    expect(spinnerClassList).toContain("co-spinner--medium");
  });

  it("renders a large spinner", () => {
    const { getByText } = render(<Spinner size="large">large</Spinner>);

    const spinnerClassList = getByText("large").classList;

    expect(spinnerClassList).toContain("co-spinner--large");
  });

  it("renders a xlarge spinner", () => {
    const { getByText } = render(<Spinner size="xlarge">xlarge</Spinner>);

    const spinnerClassList = getByText("xlarge").classList;

    expect(spinnerClassList).toContain("co-spinner--xlarge");
  });
});
