import React from "react";
import { render } from "@testing-library/react";
import Panel, { PanelType } from "../Panel";

describe("<Panel />", () => {
  it("renders", () => {
    const { container } = render(<Panel visible />);
    expect(container).toMatchSnapshot();
  });

  it("renders a panel with overlay", () => {
    const { container } = render(<Panel visible overlay />);
    expect(container).toMatchSnapshot();
  });

  it("receives custom attribute", () => {
    const { getByTestId } = render(
      <Panel data-testid="test" visible data-custom="custom-attribute">
        Panel
      </Panel>
    );

    expect(getByTestId("test").getAttribute("data-custom")).toEqual(
      "custom-attribute"
    );
  });

  it("renders with default and additional classes", () => {
    const { getByTestId } = render(
      <Panel data-testid="test" visible className="new-class" />
    );

    expect(getByTestId("test").classList.value).toBe(
      "co-panel co-panel--medium co-panel--right new-class"
    );
  });

  it("renders with default and additional styles", () => {
    const { getByTestId } = render(
      <Panel data-testid="test" visible style={{ color: "red" }}>
        Panel
      </Panel>
    );

    expect(getByTestId("test").getAttribute("style")).toBe(
      "transition: transform 500ms ease-in-out; color: red;"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<PanelType>();

    const { getByTestId } = render(
      <Panel data-testid="test" visible forwardedRef={ref} />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders the content when visible", () => {
    const { getByText } = render(<Panel visible>Panel</Panel>);

    expect(getByText("Panel")).toBeDefined();
  });

  it("renders a small panel", () => {
    const { getByTestId } = render(
      <Panel data-testid="test" size="small" visible />
    );

    expect(getByTestId("test").classList).toContain("co-panel--small");
  });

  it("renders a medium panel", () => {
    const { getByTestId } = render(<Panel data-testid="test" visible />);

    expect(getByTestId("test").classList).toContain("co-panel--medium");
  });

  it("renders a large panel", () => {
    const { getByTestId } = render(
      <Panel data-testid="test" size="large" visible />
    );

    expect(getByTestId("test").classList).toContain("co-panel--large");
  });

  it("renders a left panel", () => {
    const { getByTestId } = render(
      <Panel data-testid="test" position="left" visible />
    );

    expect(getByTestId("test").classList).toContain("co-panel--left");
    expect(getByTestId("test").getAttribute("data-co-position")).toContain(
      "left"
    );
  });

  it("renders a right panel", () => {
    const { getByTestId } = render(
      <Panel data-testid="test" position="right" visible />
    );

    expect(getByTestId("test").classList).toContain("co-panel--right");
    expect(getByTestId("test").getAttribute("data-co-position")).toContain(
      "right"
    );
  });
});
