import React, { FC, HTMLAttributes, Ref } from "react";
import cc from "classcat";
import { Transition } from "react-transition-group";
import { TransitionStatus } from "react-transition-group/Transition";
import styles from "@cobalt/css-panel";

export type Size = "small" | "medium" | "large";
export type Position = "left" | "right";

export type PanelType = HTMLDivElement;

export interface Props extends HTMLAttributes<PanelType> {
  overlay?: boolean;
  position?: Position;
  size?: Size;
  visible?: boolean;
  forwardedRef?: Ref<PanelType>;
}

const classModifiers: { [modifier in Size | Position]: keyof typeof styles } = {
  small: "co-panel--small",
  medium: "co-panel--medium",
  large: "co-panel--large",
  left: "co-panel--left",
  right: "co-panel--right",
};

const containerModifiers: {
  [modifier in Size | Position]: keyof typeof styles;
} = {
  small: "co-panel__container--small",
  medium: "co-panel__container--medium",
  large: "co-panel__container--large",
  left: "co-panel__container--left",
  right: "co-panel__container--right",
};

const duration = 500;

const panelStyle = {
  transition: `transform ${duration}ms ease-in-out`,
};

const overlayStyle = {
  transition: `opacity ${duration}ms ease-in-out`,
};

const getTransitionAttributes = (status: TransitionStatus) => ({
  "data-transition": status,
});

const Overlay = ({ ...props }) => (
  <div
    className={styles["co-panel__overlay"]}
    style={{
      ...overlayStyle,
    }}
    {...props}
  />
);

const Panel: FC<Props> = ({
  className = "",
  forwardedRef,
  position = "right",
  overlay,
  size = "medium",
  visible,
  children,
  style,
  ...props
}) => {
  const classStyles = cc([
    styles["co-panel"],
    styles[classModifiers[size]],
    styles[classModifiers[position]],
    className,
  ]);

  const containerStyles = cc([
    styles["co-panel__container"],
    styles[containerModifiers[size]],
    styles[containerModifiers[position]],
  ]);

  return (
    <>
      {overlay && (
        <Transition in={visible} timeout={duration}>
          {(status) => <Overlay {...getTransitionAttributes(status)} />}
        </Transition>
      )}
      <div className={containerStyles}>
        <Transition
          in={visible}
          mountOnEnter
          unmountOnExit
          timeout={{ enter: 0, exit: duration }}
        >
          {(status) => (
            <>
              <div
                className={classStyles}
                ref={forwardedRef}
                data-co-position={position}
                style={{
                  ...panelStyle,
                  ...style,
                }}
                {...props}
                {...getTransitionAttributes(status)}
              >
                {status !== "exited" && children}
              </div>
            </>
          )}
        </Transition>
      </div>
    </>
  );
};

export default Panel;
