import React from "react";
import { render } from "@testing-library/react";
import ClickableItem, { ClickableItemType } from "../ClickableItem";

const noop = () => {};

describe("<ClickableItem />", () => {
  it("renders a ClickableItem", () => {
    const { container } = render(
      <ClickableItem onClick={noop}>Item</ClickableItem>
    );

    expect(container).toMatchSnapshot();
  });

  it("renders with other attributes", () => {
    const { getByText } = render(
      <ClickableItem onClick={noop} data-prop="test">
        Item
      </ClickableItem>
    );

    expect(getByText("Item").getAttribute("data-prop")).toEqual("test");
  });

  it("renders with default & custom classes", () => {
    const { getByText } = render(
      <ClickableItem onClick={noop} className="customClassName">
        Item
      </ClickableItem>
    );

    const { classList } = getByText("Item");

    expect(classList.value).toBe("co-list__link customClassName");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<ClickableItemType>();

    const { getByTestId } = render(
      <ClickableItem onClick={noop} forwardedRef={ref} data-testid="test">
        Item
      </ClickableItem>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders selected", () => {
    const { getByText } = render(
      <ClickableItem onClick={noop} selected>
        Item
      </ClickableItem>
    );

    expect(getByText("Item").getAttribute("data-co-active")).toBeTruthy();
  });

  describe("when disabled is truthy", () => {
    it("renders with the correct html element", () => {
      const { container } = render(
        <ClickableItem onClick={noop} disabled>
          Item
        </ClickableItem>
      );

      expect(container).toMatchSnapshot();
    });

    it("renders disabled", () => {
      const { getByText } = render(
        <ClickableItem onClick={noop} disabled>
          Item
        </ClickableItem>
      );

      expect(getByText("Item").getAttribute("data-co-disabled")).toBeTruthy();
    });
  });
});
