import React from "react";
import { render } from "@testing-library/react";
import ExpandableRow from "../ExpandableRow";
import { RowType } from "../Row";

const renderOptions = {
  container: document.body.appendChild(document.createElement("tbody"))
};

const ExpandableComponent = (props?: any) => {
  return (
    <ExpandableRow onClick={noop} content="this is the content" {...props} />
  );
};

const noop = () => {};

describe("<ExpandableRow />", () => {
  it("renders an expandable row", () => {
    const { container } = render(<ExpandableComponent />, renderOptions);

    expect(container).toMatchSnapshot();
  });

  it("renders a row with other attributes", () => {
    const { getByTestId } = render(
      <ExpandableComponent data-testid="test" data-prop="prop" />,
      renderOptions
    );

    expect(getByTestId("test").getAttribute("data-prop")).toEqual("prop");
  });

  it("renders a row with the default & custom class", () => {
    const { getByTestId } = render(
      <ExpandableComponent className="customClassName" data-testid="test" />,
      renderOptions
    );

    const { classList } = getByTestId("test");

    expect(classList.value).toBe(
      "co-table__row co-table__row--clickable co-table__row--expandable customClassName"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<RowType>();

    const { getByTestId } = render(
      <ExpandableComponent forwardedRef={ref} data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  describe("when the row is not expanded", () => {
    it("renders an expandable row", () => {
      const { getByTestId } = render(
        <ExpandableComponent data-testid="test" />,
        renderOptions
      );

      expect(getByTestId("test").classList).toContain(
        "co-table__row--expandable"
      );

      expect(getByTestId("test").classList).not.toContain(
        "co-table__row--expanded"
      );
    });

    it("does not render the content", () => {
      const { getByTestId } = render(
        <ExpandableComponent data-testid="test" />,
        renderOptions
      );

      const content = getByTestId("test").nextElementSibling;

      expect(content!.innerHTML).toBe("");
    });
  });

  describe("when the row is expanded", () => {
    it("renders an expanded expandable row", () => {
      const { getByTestId } = render(
        <ExpandableComponent expanded data-testid="test" />,
        renderOptions
      );

      expect(getByTestId("test").classList).toContain(
        "co-table__row--expanded"
      );
    });

    it("renders an expanded content", () => {
      const { getByText } = render(
        <ExpandableComponent expanded />,
        renderOptions
      );

      expect(
        getByText("this is the content").parentElement!.classList.value
      ).toContain("co-table__row-content--expanded");
    });

    it("renders the content", () => {
      const { getByText } = render(
        <ExpandableComponent expanded />,
        renderOptions
      );

      expect(getByText("this is the content")).toBeDefined();
    });
  });
});
