import React from "react";
import { render } from "@testing-library/react";
import Cell, { CellType } from "../Cell";

const renderOptions = {
  container: document.body.appendChild(document.createElement("tr"))
};

describe("<Cell />", () => {
  it("renders a table cell", () => {
    const { container } = render(<Cell />, renderOptions);

    expect(container).toMatchSnapshot();
  });

  it("renders a cell with other attributes", () => {
    const { getByTestId } = render(
      <Cell data-testid="test" data-prop="prop" />,
      renderOptions
    );

    expect(getByTestId("test").getAttribute("data-prop")).toEqual("prop");
  });

  it("renders a cell with the default & custom class", () => {
    const { getByTestId } = render(
      <Cell className="customClassName" data-testid="test" />,
      renderOptions
    );

    const { classList } = getByTestId("test");

    expect(classList.value).toBe("co-table__cell customClassName");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<CellType>();

    const { getByTestId } = render(
      <Cell forwardedRef={ref} data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders with a different tag", () => {
    const { getByTestId } = render(<Cell as="div" data-testid="test" />);

    const node = getByTestId("test");

    expect(node.tagName).toBe("DIV");
  });

  it("renders a cell with a defined width", () => {
    const { getByTestId } = render(
      <Cell data-testid="test" width="33" />,
      renderOptions
    );

    expect(getByTestId("test").classList).toContain("co-table__cell--33");
  });
});
