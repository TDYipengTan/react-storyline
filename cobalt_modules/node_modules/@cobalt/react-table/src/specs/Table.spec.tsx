import React from "react";
import { render } from "@testing-library/react";
import Table, { TableType } from "../Table";

describe("<Table />", () => {
  it("renders a table", () => {
    const { container } = render(<Table />);

    expect(container).toMatchSnapshot();
  });

  it("renders a table with other attributes", () => {
    const { getByTestId } = render(
      <Table data-testid="test" data-prop="prop" />
    );

    expect(getByTestId("test").getAttribute("data-prop")).toEqual("prop");
  });

  it("renders a table with the default & custom class", () => {
    const { getByTestId } = render(
      <Table className="customClassName" data-testid="test" />
    );

    const { classList } = getByTestId("test");

    expect(classList.value).toBe("co-table customClassName");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<TableType>();

    const { getByTestId } = render(
      <Table forwardedRef={ref} data-testid="test" />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders with a different tag", () => {
    const { getByTestId } = render(<Table as="div" data-testid="test" />);

    const node = getByTestId("test");

    expect(node.tagName).toBe("DIV");
  });

  it("renders a borderless table", () => {
    const { getByTestId } = render(<Table data-testid="test" border="none" />);

    expect(getByTestId("test").classList).toContain("co-table--borderless");
  });

  it("renders a table with all borders", () => {
    const { getByTestId } = render(<Table data-testid="test" border="all" />);

    expect(getByTestId("test").classList).toContain("co-table--bordered");
  });
});
