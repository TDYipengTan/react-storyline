import React from "react";
import { render } from "@testing-library/react";
import DragHandle, { DragHandleType } from "../DragHandle";

const renderOptions = {
  container: document.body.appendChild(document.createElement("tr"))
};

describe("<DragHandle />", () => {
  it("renders a drag handle", () => {
    const { container } = render(<DragHandle />, renderOptions);

    expect(container).toMatchSnapshot();
  });

  it("renders with other attributes", () => {
    const { getByTestId } = render(
      <DragHandle data-testid="test" data-prop="prop" />,
      renderOptions
    );

    expect(getByTestId("test").getAttribute("data-prop")).toEqual("prop");
  });

  it("renders with the default & custom class", () => {
    const { getByRole } = render(
      <DragHandle className="customClassName" />,
      renderOptions
    );

    const node = getByRole("cell");

    expect(node.classList.value).toBe(
      "co-table__row-drag-handle customClassName"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<DragHandleType>();

    const { getByTestId } = render(
      <DragHandle forwardedRef={ref} data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders as a placeholder", () => {
    const { getByRole } = render(<DragHandle placeholder />, renderOptions);

    const node = getByRole("columnheader");

    expect(node.classList.value).toContain(
      "co-table__row-drag-handle--placeholder"
    );
  });
});
