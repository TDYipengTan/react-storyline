import React from "react";
import { render } from "@testing-library/react";
import Row, { RowType } from "../Row";

const renderOptions = {
  container: document.body.appendChild(document.createElement("tbody"))
};

describe("<Row />", () => {
  it("renders a table row", () => {
    const { container } = render(<Row />, renderOptions);

    expect(container).toMatchSnapshot();
  });

  it("renders a row with other attributes", () => {
    const { getByTestId } = render(
      <Row data-testid="test" data-prop="prop" />,
      renderOptions
    );

    expect(getByTestId("test").getAttribute("data-prop")).toEqual("prop");
  });

  it("renders a row with the default & custom class", () => {
    const { getByTestId } = render(
      <Row className="customClassName" data-testid="test" />,
      renderOptions
    );

    const { classList } = getByTestId("test");

    expect(classList.value).toBe("co-table__row customClassName");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<RowType>();

    const { getByTestId } = render(
      <Row forwardedRef={ref} data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders with a different tag", () => {
    const { getByTestId } = render(<Row as="div" data-testid="test" />);

    const node = getByTestId("test");

    expect(node.tagName).toBe("DIV");
  });

  it("renders a theme row", () => {
    const { getByTestId } = render(
      <Row variation="theme" data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test").classList).toContain("co-table__row--theme");
  });

  it("renders a success row", () => {
    const { getByTestId } = render(
      <Row variation="success" data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test").classList).toContain("co-table__row--success");
  });

  it("renders a warning row", () => {
    const { getByTestId } = render(
      <Row variation="warning" data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test").classList).toContain("co-table__row--warning");
  });

  it("renders an error row", () => {
    const { getByTestId } = render(
      <Row variation="error" data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test").classList).toContain("co-table__row--error");
  });

  it("renders a feature row", () => {
    const { getByTestId } = render(
      <Row variation="feature" data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test").classList).toContain("co-table__row--feature");
  });

  it("renders a clickable row", () => {
    const { getByTestId } = render(
      <Row onClick={() => {}} data-testid="test" />,
      renderOptions
    );

    expect(getByTestId("test").classList).toContain("co-table__row--clickable");
  });
});
