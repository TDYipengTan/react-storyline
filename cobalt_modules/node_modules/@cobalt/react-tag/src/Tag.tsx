import React, { FunctionComponent, HTMLAttributes, Ref } from "react";
import cc from "classcat";
import styles from "@cobalt/css-tag";

type Styles = typeof styles;

export type Color =
  | "theme"
  | "light-theme"
  | "green"
  | "light-green"
  | "yellow"
  | "light-yellow"
  | "red"
  | "light-red"
  | "purple"
  | "light-purple"
  | "blue"
  | "light-blue"
  | "gray"
  | "white";

type Size = "tiny" | "small" | "medium" | "large";

export type TagType = HTMLSpanElement;

export interface Props extends HTMLAttributes<TagType> {
  color?: Color;
  disabled?: boolean;
  size?: Size;
  forwardedRef?: Ref<TagType>;
}

const getClassName = (modifier: string | undefined) =>
  (modifier ? `co-tag--${modifier}` : "") as keyof Styles;

const Tag: FunctionComponent<Props> = ({
  className = "",
  forwardedRef,
  color,
  size = "medium",
  disabled,
  ...props
}) => {
  const classStyles = [
    styles["co-tag"],
    styles[getClassName(size)],
    {
      [styles[getClassName(color)]]: color,
    },
    className,
  ];

  return (
    <span
      className={cc(classStyles)}
      ref={forwardedRef}
      data-co-disabled={disabled || undefined}
      {...props}
    />
  );
};

export default Tag;
