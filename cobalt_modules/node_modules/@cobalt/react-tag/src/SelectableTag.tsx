import React, { FunctionComponent, HTMLAttributes, Ref } from "react";
import cc from "classcat";
import styles from "@cobalt/css-tag";

type TagStyles = typeof styles;
type Size = "small" | "medium" | "large";

type SelectableTagAttributes = Omit<
  HTMLAttributes<HTMLElement>,
  "onChange" | "defaultChecked"
>;

export type SelectableTagType = HTMLInputElement;

const getClassName = (modifier: string | undefined) =>
  (modifier ? `co-selectable-tag--${modifier}` : "") as keyof TagStyles;

export interface Props extends SelectableTagAttributes {
  onChange?: (checked: boolean) => void;
  size?: Size;
  selected?: boolean;
  disabled?: boolean;
  forwardedRef?: Ref<SelectableTagType>;
}

const SelectableTag: FunctionComponent<Props> = ({
  children,
  className = "",
  forwardedRef,
  style,
  size = "medium",
  disabled,
  selected,
  onChange = () => {},
  id,
  ...props
}) => {
  const classStyles = [
    styles["co-selectable-tag"],
    styles[getClassName(size)],
    {
      [styles[getClassName("selected")]]: selected
    },
    className
  ];

  const handleChange = (e: { target: SelectableTagType }) =>
    onChange(e.target.checked);

  return (
    <label
      htmlFor={id}
      className={cc(classStyles)}
      data-co-disabled={disabled || undefined}
      aria-disabled={disabled || undefined}
      style={style}
    >
      <input
        ref={forwardedRef}
        id={id}
        type="checkbox"
        disabled={disabled}
        checked={!!selected}
        onChange={handleChange}
        {...props}
      />
      {children}
    </label>
  );
};

export default SelectableTag;
