import React from "react";
import { render, fireEvent } from "@testing-library/react";
import SelectableTag, { SelectableTagType } from "../SelectableTag";

describe("<SelectableTag />", () => {
  it("renders", () => {
    const { container } = render(<SelectableTag>SelectableTag</SelectableTag>);

    expect(container).toMatchSnapshot();
  });

  it("renders with other attributes on input", () => {
    const { getByTestId } = render(
      <SelectableTag data-prop="test" data-testid="test" />
    );

    expect(getByTestId("test").getAttribute("data-prop")).toEqual("test");
  });

  it("renders with default & custom classes", () => {
    const { getByText } = render(
      <SelectableTag className="customClassName">customClass</SelectableTag>
    );

    const { classList } = getByText("customClass");

    expect(classList.value).toBe(
      "co-selectable-tag co-selectable-tag--medium customClassName"
    );
  });

  it("renders with a ref", () => {
    const ref = React.createRef<SelectableTagType>();

    const { getByTestId } = render(
      <SelectableTag forwardedRef={ref} data-testid="test">
        SelectableTag
      </SelectableTag>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders with custom id", () => {
    const { getByTestId, getByText } = render(
      <SelectableTag id="customId" data-testid="test">
        customId
      </SelectableTag>
    );

    expect(getByText("customId").getAttribute("for")).toBe("customId");
    expect(getByTestId("test").id).toBe("customId");
  });

  it("renders selected", () => {
    const { getByTestId, getByText } = render(
      <SelectableTag selected data-testid="test">
        selected
      </SelectableTag>
    );

    expect(getByTestId("test").getAttribute("checked")).not.toBeNull();
    expect(getByText("selected").classList).toContain(
      "co-selectable-tag--selected"
    );
  });

  it("renders disabled", () => {
    const { getByTestId, getByText } = render(
      <SelectableTag disabled data-testid="test">
        disabled
      </SelectableTag>
    );

    expect(getByTestId("test").getAttribute("disabled")).not.toBeNull();
    expect(getByText("disabled").getAttribute("data-co-disabled")).toBe("true");
    expect(getByText("disabled").getAttribute("aria-disabled")).toBe("true");
  });

  it("calls onChange", () => {
    const onChange = jest.fn();
    const { getByTestId } = render(
      <SelectableTag data-testid="test" onChange={onChange} />
    );

    const input = getByTestId("test");

    fireEvent.click(input);
    expect(onChange).toHaveBeenCalledWith(true);

    fireEvent.click(input);
    expect(onChange).toHaveBeenCalledWith(true);
  });

  it("renders small", () => {
    const { getByText } = render(
      <SelectableTag size="small">small</SelectableTag>
    );

    const selectableTagClassList = getByText("small").classList;

    expect(selectableTagClassList).toContain("co-selectable-tag--small");
  });

  it("renders medium", () => {
    const { getByText } = render(
      <SelectableTag size="medium">medium</SelectableTag>
    );

    expect(getByText("medium").classList).toContain(
      "co-selectable-tag--medium"
    );
  });

  it("renders large", () => {
    const { getByText } = render(
      <SelectableTag size="large">large</SelectableTag>
    );

    const selectableTagClassList = getByText("large").classList;

    expect(selectableTagClassList).toContain("co-selectable-tag--large");
  });
});
