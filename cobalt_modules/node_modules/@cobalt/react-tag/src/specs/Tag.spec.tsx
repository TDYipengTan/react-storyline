import React from "react";
import { render } from "@testing-library/react";
import Tag, { Color, TagType } from "../Tag";

describe("<Tag />", () => {
  it("renders a Tag", () => {
    const { container } = render(<Tag>Default</Tag>);

    expect(container).toMatchSnapshot();
  });

  it("renders a Tag with other attributes", () => {
    const { getByText } = render(<Tag data-prop="test">Data Prop Tag</Tag>);

    expect(getByText("Data Prop Tag").getAttribute("data-prop")).toEqual(
      "test"
    );
  });

  it("renders a Tag with default & custom classes", () => {
    const { getByText } = render(
      <Tag className="customClassName">customClass</Tag>
    );

    const { classList } = getByText("customClass");

    expect(classList.value).toBe("co-tag co-tag--medium customClassName");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<TagType>();

    const { getByTestId } = render(
      <Tag forwardedRef={ref} data-testid="test">
        Tag
      </Tag>
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders a tiny Tag", () => {
    const { getByText } = render(<Tag size="tiny">tiny</Tag>);

    const tagClassList = getByText("tiny").classList;

    expect(tagClassList).toContain("co-tag--tiny");
  });

  it("renders a small Tag", () => {
    const { getByText } = render(<Tag size="small">small</Tag>);

    const tagClassList = getByText("small").classList;

    expect(tagClassList).toContain("co-tag--small");
  });

  it("renders a medium Tag", () => {
    const { getByText } = render(<Tag size="medium">medium</Tag>);

    expect(getByText("medium").classList).toContain("co-tag--medium");
  });

  it("renders a large Tag", () => {
    const { getByText } = render(<Tag size="large">large</Tag>);

    const tagClassList = getByText("large").classList;

    expect(tagClassList).toContain("co-tag--large");
  });

  it("renders a Tag with a different color", () => {
    const colors: Color[] = [
      "theme",
      "light-theme",
      "green",
      "light-green",
      "yellow",
      "light-yellow",
      "red",
      "light-red",
      "purple",
      "light-purple",
      "blue",
      "light-blue",
      "gray",
      "white",
    ];

    colors.forEach((color) => {
      const { getByText } = render(<Tag color={color}>{color}</Tag>);

      expect(getByText(color).classList).toContain(`co-tag--${color}`);
    });
  });

  it("renders with prop disabled", () => {
    const { getByText } = render(<Tag disabled>disabled</Tag>);
    const disabledTag = getByText("disabled");

    expect(disabledTag.getAttribute("data-co-disabled")).toBe("true");
    // disabled as an html attribute shouldn't be added in this type of element
    expect(disabledTag.getAttribute("disabled")).toBeNull();
  });
});
