import React, { FC } from "react";
import { render } from "@testing-library/react";
import { ViewportContext } from "@cobalt/react-viewport-provider";
import BoxComponent, { Props, BoxType } from "../Box";

const Box: FC<Props> = (props) => (
  <ViewportContext.Provider value="medium">
    <BoxComponent {...props} />
  </ViewportContext.Provider>
);

describe("<Box />", () => {
  it("renders a box", () => {
    const { container } = render(<Box />);

    expect(container).toMatchSnapshot();
  });

  it("renders with a ref", () => {
    const ref = React.createRef<BoxType>();

    const { getByTestId } = render(
      <Box forwardedRef={ref} data-testid="box" />
    );

    expect(getByTestId("box")).toBe(ref.current);
  });

  it("renders with custom classes", () => {
    const { getByTestId } = render(
      <Box className="custom-styles" data-testid="box" />
    );
    const node = getByTestId("box");

    expect(node.classList.length).toBeGreaterThan(1);
    expect(node.classList).toContain("custom-styles");
  });

  it("renders with custom background color", () => {
    const { getByText } = render(<Box backgroundColor="orange">Box</Box>);

    expect(getByText("Box").style.backgroundColor).toBe("orange");
  });

  it("renders with custom styles", () => {
    const { getByTestId } = render(
      <Box style={{ borderColor: "orange" }} data-testid="box" />
    );
    const node = getByTestId("box");

    expect(node.style.borderColor).toBe("orange");
  });

  it("fills the available space", () => {
    const { getByTestId } = render(<Box grow data-testid="box" />);
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--grow");
  });

  it("supports a custom width", () => {
    const { getByTestId } = render(<Box width={300} data-testid="box" />);
    const node = getByTestId("box");

    expect(node.style.width).toBe("300px");
  });

  it("supports a custom width based on the viewport", () => {
    const { getByTestId } = render(
      <Box width={[100, 200, 300]} data-testid="box" />
    );
    const node = getByTestId("box");

    expect(node.style.width).toBe("200px");
  });

  it("supports a custom height", () => {
    const { getByTestId } = render(<Box height={300} data-testid="box" />);
    const node = getByTestId("box");

    expect(node.style.height).toBe("300px");
  });

  it("supports a custom height based on the viewport", () => {
    const { getByTestId } = render(
      <Box height={[100, 200, 300]} data-testid="box" />
    );
    const node = getByTestId("box");

    expect(node.style.height).toBe("200px");
  });

  it("applies both horizontal and vertical padding", () => {
    const { getByTestId } = render(<Box padding={2} data-testid="box" />);
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--padding-2");
  });

  it("applies both horizontal and vertical padding based on the viewport", () => {
    const { getByTestId } = render(
      <Box padding={[1, 2, 3]} data-testid="box" />
    );
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--padding-2");
  });

  it("applies horizontal padding", () => {
    const { getByTestId } = render(<Box paddingX={2} data-testid="box" />);
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--padding-x-2");
  });

  it("applies horizontal padding based on the viewport", () => {
    const { getByTestId } = render(
      <Box paddingX={[1, 2, 3]} data-testid="box" />
    );
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--padding-x-2");
  });

  it("applies vertical padding", () => {
    const { getByTestId } = render(<Box paddingY={2} data-testid="box" />);
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--padding-y-2");
  });

  it("applies vertical padding based on the viewport", () => {
    const { getByTestId } = render(
      <Box paddingY={[1, 2, 3]} data-testid="box" />
    );
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--padding-y-2");
  });

  ["Bottom", "Left", "Right", "Top"].forEach((side) => {
    const lowercaseSide = side.toLowerCase();

    it(`applies ${lowercaseSide} padding`, () => {
      const props = { [`padding${side}`]: 2 };
      const { getByTestId } = render(<Box {...props} data-testid="box" />);
      const node = getByTestId("box");

      expect(node.classList).toContain(`co-box--padding-${lowercaseSide}-2`);
    });

    it(`applies ${lowercaseSide} padding based on the viewport`, () => {
      const props = { [`padding${side}`]: [1, 2, 3] };
      const { getByTestId } = render(<Box {...props} data-testid="box" />);
      const node = getByTestId("box");

      expect(node.classList).toContain(`co-box--padding-${lowercaseSide}-2`);
    });
  });

  it("renders with a different tag", () => {
    const { getByTestId } = render(<Box as="header" data-testid="box" />);
    const node = getByTestId("box");

    expect(node.tagName).toBe("HEADER");
  });

  it("renders a scrollable container", () => {
    const { getByTestId } = render(<Box scrollable data-testid="box" />);
    const node = getByTestId("box");

    expect(node.classList).toContain("co-box--scrollable");
  });
});
