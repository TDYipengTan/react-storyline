import React from "react";
import { render } from "@testing-library/react";
import Avatar, { Color, Status, AvatarType } from "../Avatar";

describe("<Avatar />", () => {
  it("renders", () => {
    const { container } = render(<Avatar>AV</Avatar>);

    expect(container).toMatchSnapshot();
  });

  it("renders with other attributes", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" data-prop="test">
        AV
      </Avatar>
    );

    expect(getByTestId("avatar").getAttribute("data-prop")).toEqual("test");
  });

  it("renders with default & custom classes", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" className="customClassName">
        AV
      </Avatar>
    );

    const { classList } = getByTestId("avatar");

    expect(classList.value).toBe("co-avatar co-avatar--medium customClassName");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<AvatarType>();

    const { getByTestId } = render(
      <Avatar forwardedRef={ref} data-testid="avatar">
        AV
      </Avatar>
    );

    expect(getByTestId("avatar")).toBe(ref.current);
  });

  it("renders tiny", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" size="tiny">
        AV
      </Avatar>
    );

    const avatarClassList = getByTestId("avatar").classList;

    expect(avatarClassList).toContain("co-avatar--tiny");
  });

  it("renders small", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" size="small">
        AV
      </Avatar>
    );

    const avatarClassList = getByTestId("avatar").classList;

    expect(avatarClassList).toContain("co-avatar--small");
  });

  it("renders medium", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" size="medium">
        AV
      </Avatar>
    );

    expect(getByTestId("avatar").classList).toContain("co-avatar--medium");
  });

  it("renders large", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" size="large">
        AV
      </Avatar>
    );

    const avatarClassList = getByTestId("avatar").classList;

    expect(avatarClassList).toContain("co-avatar--large");
  });

  it("renders an Avatar with a different color", () => {
    const colors: Color[] = [
      "theme",
      "light-theme",
      "blue",
      "green",
      "purple",
      "teal",
      "yellow",
      "red",
      "orange"
    ];

    colors.forEach((color, index) => {
      const { getByTestId } = render(
        <Avatar data-testid={index} color={color}>
          {index}
        </Avatar>
      );

      expect(getByTestId(index.toString()).classList).toContain(
        `co-avatar--${color}`
      );
    });
  });

  it("renders an Avatar with a different status", () => {
    const status: Status[] = ["gray", "green", "yellow", "red"];

    status.forEach((color, index) => {
      const { getByTestId } = render(
        <Avatar data-testid={color} status={color}>
          {index}
        </Avatar>
      );

      expect(getByTestId(color).classList).toContain(
        `co-avatar--status-${color}`
      );
    });
  });

  it("renders a static skeleton", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" skeleton="static" />
    );

    const avatarClassList = getByTestId("avatar").classList;

    expect(avatarClassList).toContain("co-avatar--skeleton");
  });

  it("renders an animated skeleton", () => {
    const { getByTestId } = render(
      <Avatar data-testid="avatar" skeleton="animated" />
    );

    const avatarClassList = getByTestId("avatar").classList;

    expect(avatarClassList).toContain("co-avatar--animated-skeleton");
  });
});
