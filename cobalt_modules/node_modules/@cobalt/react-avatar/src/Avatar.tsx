import React, { FC, HTMLAttributes, Ref } from "react";
import cc from "classcat";
import styles from "@cobalt/css-avatar";

type Styles = typeof styles;
export type Color =
  | "theme"
  | "light-theme"
  | "blue"
  | "green"
  | "purple"
  | "teal"
  | "yellow"
  | "red"
  | "orange";
export type Status = "gray" | "green" | "yellow" | "red";
type Size = "tiny" | "small" | "medium" | "large";
type SkeletonType = "static" | "animated";
type StatusKeys =
  | "status-gray"
  | "status-green"
  | "status-yellow"
  | "status-red";

export type AvatarType = HTMLDivElement;

export interface Props extends HTMLAttributes<AvatarType> {
  color?: Color;
  status?: Status;
  size?: Size;
  skeleton?: SkeletonType;
  forwardedRef?: Ref<AvatarType>;
}

type ModifiersTypes = Color | Size | SkeletonType | StatusKeys;

const classModifiers: { [k in ModifiersTypes]: keyof Styles } = {
  theme: "co-avatar--theme",
  "light-theme": "co-avatar--light-theme",
  blue: "co-avatar--blue",
  green: "co-avatar--green",
  purple: "co-avatar--purple",
  teal: "co-avatar--teal",
  yellow: "co-avatar--yellow",
  red: "co-avatar--red",
  orange: "co-avatar--orange",
  tiny: "co-avatar--tiny",
  small: "co-avatar--small",
  medium: "co-avatar--medium",
  large: "co-avatar--large",
  static: "co-avatar--skeleton",
  animated: "co-avatar--animated-skeleton",
  "status-gray": "co-avatar--status-gray",
  "status-green": "co-avatar--status-green",
  "status-yellow": "co-avatar--status-yellow",
  "status-red": "co-avatar--status-red"
};

const statusModifierKeys: { [k in Status]: StatusKeys } = {
  gray: "status-gray",
  green: "status-green",
  yellow: "status-yellow",
  red: "status-red"
};

const getModifierClass = (modifier: ModifiersTypes | undefined) =>
  modifier && styles[classModifiers[modifier]];

const AvatarSkeleton: FC<{
  size: Size;
  type: SkeletonType;
  forwardedRef?: Ref<AvatarType>;
}> = ({ size, type, forwardedRef, ...props }) => {
  const classStyles = cc([
    styles["co-avatar"],
    styles[classModifiers[size]],
    styles[classModifiers[type]]
  ]);

  return <div className={classStyles} ref={forwardedRef} {...props} />;
};

const Avatar: FC<Props> = ({
  className = "",
  forwardedRef,
  size = "medium",
  color,
  status,
  skeleton,
  children,
  ...props
}) => {
  if (skeleton) {
    return (
      <AvatarSkeleton
        size={size}
        forwardedRef={forwardedRef}
        type={skeleton}
        {...props}
      />
    );
  }

  const classStyles = cc([
    styles["co-avatar"],
    styles[classModifiers[size]],
    getModifierClass(color),
    getModifierClass(status ? statusModifierKeys[status] : undefined),
    className
  ]);

  return (
    <div className={classStyles} ref={forwardedRef} {...props}>
      <div className={styles["co-avatar__content"]}>{children}</div>
    </div>
  );
};

export default Avatar;
