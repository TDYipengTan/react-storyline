import React, { FC, Ref, HTMLAttributes, CSSProperties } from "react";
import cc from "classcat";
import styles from "@cobalt/css-grid";
import useResponsiveValue, {
  ResponsiveValue,
} from "@cobalt/react-responsive-value-hook";

type Styles = typeof styles;
export type ColumnNumber =
  | "1"
  | 1
  | "2"
  | 2
  | "3"
  | 3
  | "4"
  | 4
  | "5"
  | 5
  | "6"
  | 6
  | "7"
  | 7
  | "8"
  | 8
  | "9"
  | 9
  | "10"
  | 10
  | "11"
  | 11
  | "12"
  | 12
  | "13"
  | 13
  | "14"
  | 14
  | "15"
  | 15
  | "16"
  | 16
  | "17"
  | 17
  | "18"
  | 18
  | "19"
  | 19
  | "20"
  | 20;

type Space =
  | "0"
  | 0
  | "1"
  | 1
  | "2"
  | 2
  | "3"
  | 3
  | "4"
  | 4
  | "5"
  | 5
  | "6"
  | 6
  | "7"
  | 7
  | "8"
  | 8
  | "9"
  | 9
  | "10"
  | 10
  | "11"
  | 11
  | "12"
  | 12;

type As = keyof Pick<
  JSX.IntrinsicElements,
  | "section"
  | "header"
  | "main"
  | "footer"
  | "div"
  | "aside"
  | "article"
  | "details"
  | "nav"
>;

export type GridType = any;

export interface Props extends HTMLAttributes<HTMLElement> {
  /** Renders the component using a different element. */
  as?: As;
  backgroundColor?: CSSProperties["backgroundColor"];
  /**
   * Defines the number of columns per row.
   * Use values from 1 to 20, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  columns?: ResponsiveValue<ColumnNumber>;
  /**
   * Defines the space between columns (horizontally and vertically).
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  gap?: ResponsiveValue<Space>;
  /**
   * Defines the height of the element.
   * Use any valid value for CSS property, or a tuple with values for the supported viewports.
   */
  height?: ResponsiveValue<CSSProperties["height"]>;
  /**
   * Defines the width of the element.
   * Use any valid value for CSS property, or a tuple with values for the supported viewports.
   */
  width?: ResponsiveValue<CSSProperties["width"]>;
  /**
   * Defines the padding.
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  padding?: ResponsiveValue<Space>;
  /**
   * Defines the horizontal padding.
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  paddingX?: ResponsiveValue<Space>;
  /**
   * Defines the vertical padding.
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  paddingY?: ResponsiveValue<Space>;
  /**
   * Defines the bottom padding.
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  paddingBottom?: ResponsiveValue<Space>;
  /**
   * Defines the left padding.
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  paddingLeft?: ResponsiveValue<Space>;
  /**
   * Defines the right padding.
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  paddingRight?: ResponsiveValue<Space>;
  /**
   * Defines the top padding.
   * Use values from 0 to 12, or a tuple with values for the supported viewports.
   * These values will be multiplied by a predefined space unit.
   */
  paddingTop?: ResponsiveValue<Space>;
  forwardedRef?: Ref<GridType>;
}

const Grid: FC<Props> = ({
  className = "",
  forwardedRef,
  as = "div",
  backgroundColor,
  columns = "1",
  gap,
  height,
  width,
  style,
  padding,
  paddingX,
  paddingY,
  paddingBottom,
  paddingLeft,
  paddingRight,
  paddingTop,
  ...props
}) => {
  const rColumns = useResponsiveValue(columns);
  const rGap = useResponsiveValue(gap);
  const rPadding = useResponsiveValue(padding);
  const rPaddingX = useResponsiveValue(paddingX);
  const rPaddingY = useResponsiveValue(paddingY);
  const rPaddingBottom = useResponsiveValue(paddingBottom);
  const rPaddingLeft = useResponsiveValue(paddingLeft);
  const rPaddingRight = useResponsiveValue(paddingRight);
  const rPaddingTop = useResponsiveValue(paddingTop);
  const rWidth = useResponsiveValue(width);
  const rHeight = useResponsiveValue(height);

  const Tag = as;

  const classes = [
    styles["co-grid"],
    styles[`co-grid--${rColumns}-columns` as keyof Styles],
    {
      [styles[`co-grid--gap-${rGap}` as keyof Styles]]: rGap !== undefined,
      [styles[`co-grid--padding-${rPadding}` as keyof Styles]]:
        rPadding !== undefined,
      [styles[`co-grid--padding-x-${rPaddingX}` as keyof Styles]]:
        rPaddingX !== undefined,
      [styles[`co-grid--padding-y-${rPaddingY}` as keyof Styles]]:
        rPaddingY !== undefined,
      [styles[`co-grid--padding-bottom-${rPaddingBottom}` as keyof Styles]]:
        rPaddingBottom !== undefined,
      [styles[`co-grid--padding-left-${rPaddingLeft}` as keyof Styles]]:
        rPaddingLeft !== undefined,
      [styles[`co-grid--padding-right-${rPaddingRight}` as keyof Styles]]:
        rPaddingRight !== undefined,
      [styles[`co-grid--padding-top-${rPaddingTop}` as keyof Styles]]:
        rPaddingTop !== undefined,
    },
    className,
  ];

  return (
    <Tag
      className={cc(classes)}
      ref={forwardedRef}
      style={{ height: rHeight, width: rWidth, backgroundColor, ...style }}
      {...props}
    />
  );
};

export default Grid;
