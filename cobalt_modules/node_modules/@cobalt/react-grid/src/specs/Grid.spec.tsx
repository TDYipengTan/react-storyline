import React, { FC } from "react";
import { render } from "@testing-library/react";
import { ViewportContext } from "@cobalt/react-viewport-provider";
import GridComponent, { Props, GridType } from "../Grid";

const Grid: FC<Props> = (props) => (
  <ViewportContext.Provider value="medium">
    <GridComponent {...props} />
  </ViewportContext.Provider>
);

describe("<Grid />", () => {
  it("renders", () => {
    const { container } = render(<Grid />);

    expect(container).toMatchSnapshot();
  });

  it("renders with custom background color", () => {
    const { getByText } = render(<Grid backgroundColor="red">Grid</Grid>);

    expect(getByText("Grid").style.backgroundColor).toBe("red");
  });

  it("receives custom attribute", () => {
    const { getByText } = render(
      <Grid data-custom="custom-attribute">Grid</Grid>
    );

    expect(getByText("Grid").getAttribute("data-custom")).toEqual(
      "custom-attribute"
    );
  });

  it("renders with default and custom classes", () => {
    const { getByTestId } = render(
      <Grid data-testid="test" className="custom-class" />
    );

    expect(getByTestId("test").classList.value).toBe(
      "co-grid co-grid--1-columns custom-class"
    );
  });

  it("renders with custom styles", () => {
    const { getByTestId } = render(
      <Grid data-testid="test" style={{ color: "blue" }} />
    );

    expect(getByTestId("test").style.color).toBe("blue");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<GridType>();

    const { getByTestId } = render(
      <Grid forwardedRef={ref} as="header" data-testid="test" />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders with a defined gap", () => {
    const { getByTestId } = render(<Grid data-testid="test" gap={"8"} />);

    expect(getByTestId("test").classList).toContain("co-grid--gap-8");
  });

  it("renders with a defined gap based on the viewport", () => {
    const { getByTestId } = render(<Grid data-testid="test" gap={[1, 2, 3]} />);

    expect(getByTestId("test").classList).toContain("co-grid--gap-2");
  });

  it("renders with a defined number of columns", () => {
    const { getByTestId } = render(<Grid data-testid="test" columns={8} />);

    expect(getByTestId("test").classList).toContain("co-grid--8-columns");
  });

  it("renders with a defined number of columns based on the viewport", () => {
    const { getByTestId } = render(
      <Grid data-testid="test" columns={[1, 2, 3]} />
    );

    expect(getByTestId("test").classList).toContain("co-grid--2-columns");
  });

  it("renders with a defined height", () => {
    const { getByTestId } = render(<Grid data-testid="test" height="100%" />);

    expect(getByTestId("test").style.height).toBe("100%");
  });

  it("renders with a defined height based on the viewport", () => {
    const { getByTestId } = render(
      <Grid data-testid="test" height={["100%", 25, 50]} />
    );

    expect(getByTestId("test").style.height).toBe("25px");
  });

  it("renders with a defined width", () => {
    const { getByTestId } = render(<Grid data-testid="test" width="100px" />);

    expect(getByTestId("test").style.width).toBe("100px");
  });

  it("renders with a defined width based on the viewport", () => {
    const { getByTestId } = render(
      <Grid data-testid="test" width={["100%", 25, 50]} />
    );

    expect(getByTestId("test").style.width).toBe("25px");
  });

  it("renders with a different tag", () => {
    const { getByTestId } = render(<Grid data-testid="test" as="header" />);

    expect(getByTestId("test").tagName).toBe("HEADER");
  });

  it("applies both horizontal and vertical padding", () => {
    const { getByTestId } = render(<Grid padding={2} data-testid="grid" />);
    const node = getByTestId("grid");

    expect(node.classList).toContain("co-grid--padding-2");
  });

  it("applies both horizontal and vertical padding based on the viewport", () => {
    const { getByTestId } = render(
      <Grid padding={[1, 2, 3]} data-testid="grid" />
    );
    const node = getByTestId("grid");

    expect(node.classList).toContain("co-grid--padding-2");
  });

  it("applies horizontal padding", () => {
    const { getByTestId } = render(<Grid paddingX={2} data-testid="grid" />);
    const node = getByTestId("grid");

    expect(node.classList).toContain("co-grid--padding-x-2");
  });

  it("applies horizontal padding based on the viewport", () => {
    const { getByTestId } = render(
      <Grid paddingX={[1, 2, 3]} data-testid="grid" />
    );
    const node = getByTestId("grid");

    expect(node.classList).toContain("co-grid--padding-x-2");
  });

  it("applies vertical padding", () => {
    const { getByTestId } = render(<Grid paddingY={2} data-testid="grid" />);
    const node = getByTestId("grid");

    expect(node.classList).toContain("co-grid--padding-y-2");
  });

  it("applies vertical padding based on the viewport", () => {
    const { getByTestId } = render(
      <Grid paddingY={[1, 2, 3]} data-testid="grid" />
    );
    const node = getByTestId("grid");

    expect(node.classList).toContain("co-grid--padding-y-2");
  });

  ["Bottom", "Left", "Right", "Top"].forEach((side) => {
    const lowercaseSide = side.toLowerCase();

    it(`applies ${lowercaseSide} padding`, () => {
      const props = { [`padding${side}`]: 2 };
      const { getByTestId } = render(<Grid {...props} data-testid="grid" />);
      const node = getByTestId("grid");

      expect(node.classList).toContain(`co-grid--padding-${lowercaseSide}-2`);
    });

    it(`applies ${lowercaseSide} padding based on the viewport`, () => {
      const props = { [`padding${side}`]: [1, 2, 3] };
      const { getByTestId } = render(<Grid {...props} data-testid="grid" />);
      const node = getByTestId("grid");

      expect(node.classList).toContain(`co-grid--padding-${lowercaseSide}-2`);
    });
  });
});
