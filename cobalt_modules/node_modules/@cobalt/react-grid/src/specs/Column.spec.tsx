import React, { FC } from "react";
import { render } from "@testing-library/react";
import { ViewportContext } from "@cobalt/react-viewport-provider";
import ColumnComponent, { Props, ColumnType } from "../Column";

const Column: FC<Props> = (props) => (
  <ViewportContext.Provider value="medium">
    <ColumnComponent {...props} />
  </ViewportContext.Provider>
);

describe("<Column />", () => {
  it("renders", () => {
    const { container } = render(<Column />);

    expect(container).toMatchSnapshot();
  });

  it("receives custom attribute", () => {
    const { getByText } = render(
      <Column data-custom="custom-attribute">Column</Column>
    );

    expect(getByText("Column").getAttribute("data-custom")).toEqual(
      "custom-attribute"
    );
  });

  it("renders with default and custom classes", () => {
    const { getByTestId } = render(
      <Column data-testid="test" className="custom-class" />
    );

    expect(getByTestId("test").classList.value).toBe(
      "co-grid__column custom-class"
    );
  });

  it("renders with custom styles", () => {
    const { getByTestId } = render(
      <Column data-testid="test" style={{ color: "blue" }} />
    );

    expect(getByTestId("test").style.color).toBe("blue");
  });

  it("renders with a ref", () => {
    const ref = React.createRef<ColumnType>();

    const { getByTestId } = render(
      <Column forwardedRef={ref} data-testid="test" />
    );

    expect(getByTestId("test")).toBe(ref.current);
  });

  it("renders with a defined length", () => {
    const { getByTestId } = render(<Column data-testid="test" length="8" />);

    expect(getByTestId("test").classList).toContain(
      "co-grid__column--length-8"
    );
  });

  it("renders with a defined length based on the viewport", () => {
    const { getByTestId } = render(
      <Column data-testid="test" length={[1, 2, 3]} />
    );

    expect(getByTestId("test").classList).toContain(
      "co-grid__column--length-2"
    );
  });

  it("renders with a defined start-column position", () => {
    const { getByTestId } = render(<Column data-testid="test" position={8} />);

    expect(getByTestId("test").classList).toContain(
      "co-grid__column--position-8"
    );
  });

  it("renders with a defined start-column position based on the viewport", () => {
    const { getByTestId } = render(
      <Column data-testid="test" position={[1, 2, 3]} />
    );

    expect(getByTestId("test").classList).toContain(
      "co-grid__column--position-2"
    );
  });
});
